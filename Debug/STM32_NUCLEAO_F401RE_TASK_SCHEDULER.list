
STM32_NUCLEAO_F401RE_TASK_SCHEDULER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080010bc  080010bc  000110bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001170  08001170  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001170  08001170  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001170  08001170  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001174  08001174  00011174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000074  080011ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080011ec  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b77  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ae  00000000  00000000  00020c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00020fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00021168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c41  00000000  00000000  000212c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000153b  00000000  00000000  00023f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000960c  00000000  00000000  00025444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002ea50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  0002eaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010a4 	.word	0x080010a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080010a4 	.word	0x080010a4

080001d4 <main>:
// GLOBAL VARIABLES
uint32_t psp_of_tasks[MAX_TASKS] = {TASK1_START, TASK2_START, TASK3_START, TASK4_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task 1 is running

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001d8:	f000 f8fc 	bl	80003d4 <enable_processor_faults>

	//Initialization of the scheduler stack
	init_schedular_stack(SCHED_STACK_START);
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x3c>)
 80001de:	f000 f8ab 	bl	8000338 <init_schedular_stack>

	//Array filling capture addresses of tasks
	task_handlers[0] = (uint32_t)task1;
 80001e2:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <main+0x40>)
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <main+0x44>)
 80001e6:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0x48>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x44>)
 80001ec:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3;
 80001ee:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <main+0x4c>)
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0x44>)
 80001f2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4;
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <main+0x50>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x44>)
 80001f8:	60da      	str	r2, [r3, #12]

	//Initialization of the task stack with dummy frames.
	init_task_stack();
 80001fa:	f000 f8a3 	bl	8000344 <init_task_stack>

	//Initialization of the SysTick timer
	init_systick_timer(TICK_HZ);
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f000 f861 	bl	80002c8 <init_systick_timer>

	switch_sp_to_psp();
 8000206:	f000 f943 	bl	8000490 <switch_sp_to_psp>

	task1(); //Call task1
 800020a:	f000 f80d 	bl	8000228 <task1>

	while(1);
 800020e:	e7fe      	b.n	800020e <main+0x3a>
 8000210:	2000f000 	.word	0x2000f000
 8000214:	08000229 	.word	0x08000229
 8000218:	20000090 	.word	0x20000090
 800021c:	08000239 	.word	0x08000239
 8000220:	08000249 	.word	0x08000249
 8000224:	08000259 	.word	0x08000259

08000228 <task1>:
}

void task1(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	while(1){
		printf("task1 \n");
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <task1+0xc>)
 800022e:	f000 faa9 	bl	8000784 <puts>
 8000232:	e7fb      	b.n	800022c <task1+0x4>
 8000234:	080010bc 	.word	0x080010bc

08000238 <task2>:
	}
}
void task2(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	while(1){
		printf("task2 \n");
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <task2+0xc>)
 800023e:	f000 faa1 	bl	8000784 <puts>
 8000242:	e7fb      	b.n	800023c <task2+0x4>
 8000244:	080010c4 	.word	0x080010c4

08000248 <task3>:
		}
}
void task3(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1){
		printf("task3 \n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <task3+0xc>)
 800024e:	f000 fa99 	bl	8000784 <puts>
 8000252:	e7fb      	b.n	800024c <task3+0x4>
 8000254:	080010cc 	.word	0x080010cc

08000258 <task4>:
		}
}
void task4(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1){
		printf("task4 \n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task4+0xc>)
 800025e:	f000 fa91 	bl	8000784 <puts>
 8000262:	e7fb      	b.n	800025c <task4+0x4>
 8000264:	080010d4 	.word	0x080010d4

08000268 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void){

	/* SAVE the Current TASK */

	// get current's task PSP value
	__asm volatile("MRS R0, PSP");
 8000268:	f3ef 8009 	mrs	r0, PSP

	//using the PSP value, store the remaining registers ( stack frame 2 )
	__asm volatile("STMDB R0!, {R4-R11}");
 800026c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//SAVE the return LR
	__asm volatile("PUSH {LR}");
 8000270:	b500      	push	{lr}

	//Save the current PSP Value
	__asm volatile("BL save_psp_value");
 8000272:	f000 f8cf 	bl	8000414 <save_psp_value>

	/* Retrieve the next TASK */

	//Decide next TASK to RUN
	__asm volatile("BL update_next_task");
 8000276:	f000 f8f5 	bl	8000464 <update_next_task>

	//Get the PAST PSP VALUE
	__asm volatile("BL get_psp_value");
 800027a:	f000 f8e1 	bl	8000440 <get_psp_value>
	/*Note: Register R0 will automatically get the value of PSP*/

	//Using that PSP value, retrieve the Rest of the stack frame ( R4 - R11 )
	__asm volatile("LDMIA R0!,{R4-R11}");
 800027e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("MRS R0, PSP");
 8000282:	f3ef 8009 	mrs	r0, PSP



}
 8000286:	bf00      	nop

08000288 <HardFault_Handler>:

//Implement the fault handlers
void HardFault_Handler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	printf("HardFault \n");
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <HardFault_Handler+0xc>)
 800028e:	f000 fa79 	bl	8000784 <puts>
	while(1);
 8000292:	e7fe      	b.n	8000292 <HardFault_Handler+0xa>
 8000294:	080010dc 	.word	0x080010dc

08000298 <MemManage_Handler>:
}
void MemManage_Handler(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	printf("MemManage \n");
 800029c:	4801      	ldr	r0, [pc, #4]	; (80002a4 <MemManage_Handler+0xc>)
 800029e:	f000 fa71 	bl	8000784 <puts>
	while(1);
 80002a2:	e7fe      	b.n	80002a2 <MemManage_Handler+0xa>
 80002a4:	080010e8 	.word	0x080010e8

080002a8 <BusFault_Handler>:
}
void BusFault_Handler(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	printf("BusFault \n");
 80002ac:	4801      	ldr	r0, [pc, #4]	; (80002b4 <BusFault_Handler+0xc>)
 80002ae:	f000 fa69 	bl	8000784 <puts>
	while(1);
 80002b2:	e7fe      	b.n	80002b2 <BusFault_Handler+0xa>
 80002b4:	080010f4 	.word	0x080010f4

080002b8 <UsageFault_Handler>:
}
void UsageFault_Handler(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	printf("UsageFault \n");
 80002bc:	4801      	ldr	r0, [pc, #4]	; (80002c4 <UsageFault_Handler+0xc>)
 80002be:	f000 fa61 	bl	8000784 <puts>
	while(1);
 80002c2:	e7fe      	b.n	80002c2 <UsageFault_Handler+0xa>
 80002c4:	08001100 	.word	0x08001100

080002c8 <init_systick_timer>:
}


void init_systick_timer(uint32_t tick_hz){
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	uint32_t *pSYST_RVR = (uint32_t *) 0xE000E014;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <init_systick_timer+0x64>)
 80002d2:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_CSR = (uint32_t *) 0xE000E010;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <init_systick_timer+0x68>)
 80002d6:	613b      	str	r3, [r7, #16]
	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz;
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <init_systick_timer+0x6c>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSYST_RVR &= ~(0x00FFFFFF);
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSYST_RVR |= count_value;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	431a      	orrs	r2, r3
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pSYST_CSR |= (1<<1); //Enables SysTick exception request
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 0202 	orr.w	r2, r3, #2
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (1<<2); //Indicates the clock source, processor clock source
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0204 	orr.w	r2, r3, #4
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (1<<0); // Enables the counter
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0201 	orr.w	r2, r3, #1
 800031a:	693b      	ldr	r3, [r7, #16]
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	371c      	adds	r7, #28
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e014 	.word	0xe000e014
 8000330:	e000e010 	.word	0xe000e010
 8000334:	00f42400 	.word	0x00f42400

08000338 <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 8000338:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack): );
 800033a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800033e:	4770      	bx	lr

}
 8000340:	bf00      	nop
	...

08000344 <init_task_stack>:

void init_task_stack(void){
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i = 0; i< MAX_TASKS; i++){
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	e032      	b.n	80003b6 <init_task_stack+0x72>
		pPSP = (uint32_t*) psp_of_tasks[i];
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <init_task_stack+0x88>)
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000366:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3b04      	subs	r3, #4
 800036c:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i]; //the address of the task handler must be odd
 800036e:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <init_task_stack+0x8c>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

		for(int j=0; j<13; j++){
 8000388:	2300      	movs	r3, #0
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	e008      	b.n	80003a0 <init_task_stack+0x5c>
			pPSP--;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3b04      	subs	r3, #4
 8000392:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b0c      	cmp	r3, #12
 80003a4:	ddf3      	ble.n	800038e <init_task_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t) pPSP;
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	4908      	ldr	r1, [pc, #32]	; (80003cc <init_task_stack+0x88>)
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i< MAX_TASKS; i++){
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	3301      	adds	r3, #1
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	ddc9      	ble.n	8000350 <init_task_stack+0xc>

	}
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000090 	.word	0x20000090

080003d4 <enable_processor_faults>:

void enable_processor_faults(void){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	uint32_t *pSHCRS = (uint32_t*) 0xE000ED24;
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <enable_processor_faults+0x3c>)
 80003dc:	607b      	str	r3, [r7, #4]
	*pSHCRS |= (1 << 16); //mem manage
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1 << 17); //Bus fault
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1 << 18); //Usage fault
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]

}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed24 	.word	0xe000ed24

08000414 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <save_psp_value+0x24>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4619      	mov	r1, r3
 8000422:	4a06      	ldr	r2, [pc, #24]	; (800043c <save_psp_value+0x28>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	200000a0 	.word	0x200000a0
 800043c:	20000000 	.word	0x20000000

08000440 <get_psp_value>:

uint32_t get_psp_value(void){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <get_psp_value+0x1c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <get_psp_value+0x20>)
 800044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000450:	4618      	mov	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200000a0 	.word	0x200000a0
 8000460:	20000000 	.word	0x20000000

08000464 <update_next_task>:

void update_next_task(void){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	current_task++;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <update_next_task+0x28>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <update_next_task+0x28>)
 8000472:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <update_next_task+0x28>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	f003 0303 	and.w	r3, r3, #3
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <update_next_task+0x28>)
 8000480:	701a      	strb	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	200000a0 	.word	0x200000a0

08000490 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//get the value of psp of current task
	__asm volatile("PUSH {LR}"); //preserve LR which connext back to main()
 8000490:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000492:	f7ff ffd5 	bl	8000440 <get_psp_value>
	__asm volatile("MSR PSP, R0"); //Initialize PSP.
 8000496:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800049a:	f85d eb04 	ldr.w	lr, [sp], #4

	// change SP  to PSP using CONTROL Register
	__asm volatile ("MOV R0, #0x02");
 800049e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80004a2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80004a6:	4770      	bx	lr

}
 80004a8:	bf00      	nop

080004aa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	60f8      	str	r0, [r7, #12]
 80004b2:	60b9      	str	r1, [r7, #8]
 80004b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e00a      	b.n	80004d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004bc:	f3af 8000 	nop.w
 80004c0:	4601      	mov	r1, r0
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	60ba      	str	r2, [r7, #8]
 80004c8:	b2ca      	uxtb	r2, r1
 80004ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	dbf0      	blt.n	80004bc <_read+0x12>
  }

  return len;
 80004da:	687b      	ldr	r3, [r7, #4]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e009      	b.n	800050a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	60ba      	str	r2, [r7, #8]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	697a      	ldr	r2, [r7, #20]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	dbf1      	blt.n	80004f6 <_write+0x12>
  }
  return len;
 8000512:	687b      	ldr	r3, [r7, #4]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <_close>:

int _close(int file)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000544:	605a      	str	r2, [r3, #4]
  return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <_isatty>:

int _isatty(int file)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800055c:	2301      	movs	r3, #1
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	60f8      	str	r0, [r7, #12]
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <_sbrk+0x5c>)
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <_sbrk+0x60>)
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <_sbrk+0x64>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <_sbrk+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d207      	bcs.n	80005c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b4:	f000 f846 	bl	8000644 <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	e009      	b.n	80005d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <_sbrk+0x64>)
 80005d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20018000 	.word	0x20018000
 80005e4:	00000400 	.word	0x00000400
 80005e8:	200000a4 	.word	0x200000a4
 80005ec:	200000b8 	.word	0x200000b8

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f817 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fdd7 	bl	80001d4 <main>

08000626 <LoopForever>:

LoopForever:
  b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000634:	08001178 	.word	0x08001178
  ldr r2, =_sbss
 8000638:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800063c:	200000b8 	.word	0x200000b8

08000640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>
	...

08000644 <__errno>:
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <__errno+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000010 	.word	0x20000010

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	4d0d      	ldr	r5, [pc, #52]	; (8000688 <__libc_init_array+0x38>)
 8000654:	4c0d      	ldr	r4, [pc, #52]	; (800068c <__libc_init_array+0x3c>)
 8000656:	1b64      	subs	r4, r4, r5
 8000658:	10a4      	asrs	r4, r4, #2
 800065a:	2600      	movs	r6, #0
 800065c:	42a6      	cmp	r6, r4
 800065e:	d109      	bne.n	8000674 <__libc_init_array+0x24>
 8000660:	4d0b      	ldr	r5, [pc, #44]	; (8000690 <__libc_init_array+0x40>)
 8000662:	4c0c      	ldr	r4, [pc, #48]	; (8000694 <__libc_init_array+0x44>)
 8000664:	f000 fd1e 	bl	80010a4 <_init>
 8000668:	1b64      	subs	r4, r4, r5
 800066a:	10a4      	asrs	r4, r4, #2
 800066c:	2600      	movs	r6, #0
 800066e:	42a6      	cmp	r6, r4
 8000670:	d105      	bne.n	800067e <__libc_init_array+0x2e>
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f855 3b04 	ldr.w	r3, [r5], #4
 8000678:	4798      	blx	r3
 800067a:	3601      	adds	r6, #1
 800067c:	e7ee      	b.n	800065c <__libc_init_array+0xc>
 800067e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000682:	4798      	blx	r3
 8000684:	3601      	adds	r6, #1
 8000686:	e7f2      	b.n	800066e <__libc_init_array+0x1e>
 8000688:	08001170 	.word	0x08001170
 800068c:	08001170 	.word	0x08001170
 8000690:	08001170 	.word	0x08001170
 8000694:	08001174 	.word	0x08001174

08000698 <memset>:
 8000698:	4402      	add	r2, r0
 800069a:	4603      	mov	r3, r0
 800069c:	4293      	cmp	r3, r2
 800069e:	d100      	bne.n	80006a2 <memset+0xa>
 80006a0:	4770      	bx	lr
 80006a2:	f803 1b01 	strb.w	r1, [r3], #1
 80006a6:	e7f9      	b.n	800069c <memset+0x4>

080006a8 <_puts_r>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	460e      	mov	r6, r1
 80006ac:	4605      	mov	r5, r0
 80006ae:	b118      	cbz	r0, 80006b8 <_puts_r+0x10>
 80006b0:	6983      	ldr	r3, [r0, #24]
 80006b2:	b90b      	cbnz	r3, 80006b8 <_puts_r+0x10>
 80006b4:	f000 fa48 	bl	8000b48 <__sinit>
 80006b8:	69ab      	ldr	r3, [r5, #24]
 80006ba:	68ac      	ldr	r4, [r5, #8]
 80006bc:	b913      	cbnz	r3, 80006c4 <_puts_r+0x1c>
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 fa42 	bl	8000b48 <__sinit>
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <_puts_r+0xd0>)
 80006c6:	429c      	cmp	r4, r3
 80006c8:	d120      	bne.n	800070c <_puts_r+0x64>
 80006ca:	686c      	ldr	r4, [r5, #4]
 80006cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ce:	07db      	lsls	r3, r3, #31
 80006d0:	d405      	bmi.n	80006de <_puts_r+0x36>
 80006d2:	89a3      	ldrh	r3, [r4, #12]
 80006d4:	0598      	lsls	r0, r3, #22
 80006d6:	d402      	bmi.n	80006de <_puts_r+0x36>
 80006d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006da:	f000 fad3 	bl	8000c84 <__retarget_lock_acquire_recursive>
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	0719      	lsls	r1, r3, #28
 80006e2:	d51d      	bpl.n	8000720 <_puts_r+0x78>
 80006e4:	6923      	ldr	r3, [r4, #16]
 80006e6:	b1db      	cbz	r3, 8000720 <_puts_r+0x78>
 80006e8:	3e01      	subs	r6, #1
 80006ea:	68a3      	ldr	r3, [r4, #8]
 80006ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006f0:	3b01      	subs	r3, #1
 80006f2:	60a3      	str	r3, [r4, #8]
 80006f4:	bb39      	cbnz	r1, 8000746 <_puts_r+0x9e>
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	da38      	bge.n	800076c <_puts_r+0xc4>
 80006fa:	4622      	mov	r2, r4
 80006fc:	210a      	movs	r1, #10
 80006fe:	4628      	mov	r0, r5
 8000700:	f000 f848 	bl	8000794 <__swbuf_r>
 8000704:	3001      	adds	r0, #1
 8000706:	d011      	beq.n	800072c <_puts_r+0x84>
 8000708:	250a      	movs	r5, #10
 800070a:	e011      	b.n	8000730 <_puts_r+0x88>
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <_puts_r+0xd4>)
 800070e:	429c      	cmp	r4, r3
 8000710:	d101      	bne.n	8000716 <_puts_r+0x6e>
 8000712:	68ac      	ldr	r4, [r5, #8]
 8000714:	e7da      	b.n	80006cc <_puts_r+0x24>
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <_puts_r+0xd8>)
 8000718:	429c      	cmp	r4, r3
 800071a:	bf08      	it	eq
 800071c:	68ec      	ldreq	r4, [r5, #12]
 800071e:	e7d5      	b.n	80006cc <_puts_r+0x24>
 8000720:	4621      	mov	r1, r4
 8000722:	4628      	mov	r0, r5
 8000724:	f000 f888 	bl	8000838 <__swsetup_r>
 8000728:	2800      	cmp	r0, #0
 800072a:	d0dd      	beq.n	80006e8 <_puts_r+0x40>
 800072c:	f04f 35ff 	mov.w	r5, #4294967295
 8000730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000732:	07da      	lsls	r2, r3, #31
 8000734:	d405      	bmi.n	8000742 <_puts_r+0x9a>
 8000736:	89a3      	ldrh	r3, [r4, #12]
 8000738:	059b      	lsls	r3, r3, #22
 800073a:	d402      	bmi.n	8000742 <_puts_r+0x9a>
 800073c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800073e:	f000 faa2 	bl	8000c86 <__retarget_lock_release_recursive>
 8000742:	4628      	mov	r0, r5
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	2b00      	cmp	r3, #0
 8000748:	da04      	bge.n	8000754 <_puts_r+0xac>
 800074a:	69a2      	ldr	r2, [r4, #24]
 800074c:	429a      	cmp	r2, r3
 800074e:	dc06      	bgt.n	800075e <_puts_r+0xb6>
 8000750:	290a      	cmp	r1, #10
 8000752:	d004      	beq.n	800075e <_puts_r+0xb6>
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	6022      	str	r2, [r4, #0]
 800075a:	7019      	strb	r1, [r3, #0]
 800075c:	e7c5      	b.n	80006ea <_puts_r+0x42>
 800075e:	4622      	mov	r2, r4
 8000760:	4628      	mov	r0, r5
 8000762:	f000 f817 	bl	8000794 <__swbuf_r>
 8000766:	3001      	adds	r0, #1
 8000768:	d1bf      	bne.n	80006ea <_puts_r+0x42>
 800076a:	e7df      	b.n	800072c <_puts_r+0x84>
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	250a      	movs	r5, #10
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	6022      	str	r2, [r4, #0]
 8000774:	701d      	strb	r5, [r3, #0]
 8000776:	e7db      	b.n	8000730 <_puts_r+0x88>
 8000778:	08001130 	.word	0x08001130
 800077c:	08001150 	.word	0x08001150
 8000780:	08001110 	.word	0x08001110

08000784 <puts>:
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <puts+0xc>)
 8000786:	4601      	mov	r1, r0
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f7ff bf8d 	b.w	80006a8 <_puts_r>
 800078e:	bf00      	nop
 8000790:	20000010 	.word	0x20000010

08000794 <__swbuf_r>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	460e      	mov	r6, r1
 8000798:	4614      	mov	r4, r2
 800079a:	4605      	mov	r5, r0
 800079c:	b118      	cbz	r0, 80007a6 <__swbuf_r+0x12>
 800079e:	6983      	ldr	r3, [r0, #24]
 80007a0:	b90b      	cbnz	r3, 80007a6 <__swbuf_r+0x12>
 80007a2:	f000 f9d1 	bl	8000b48 <__sinit>
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <__swbuf_r+0x98>)
 80007a8:	429c      	cmp	r4, r3
 80007aa:	d12b      	bne.n	8000804 <__swbuf_r+0x70>
 80007ac:	686c      	ldr	r4, [r5, #4]
 80007ae:	69a3      	ldr	r3, [r4, #24]
 80007b0:	60a3      	str	r3, [r4, #8]
 80007b2:	89a3      	ldrh	r3, [r4, #12]
 80007b4:	071a      	lsls	r2, r3, #28
 80007b6:	d52f      	bpl.n	8000818 <__swbuf_r+0x84>
 80007b8:	6923      	ldr	r3, [r4, #16]
 80007ba:	b36b      	cbz	r3, 8000818 <__swbuf_r+0x84>
 80007bc:	6923      	ldr	r3, [r4, #16]
 80007be:	6820      	ldr	r0, [r4, #0]
 80007c0:	1ac0      	subs	r0, r0, r3
 80007c2:	6963      	ldr	r3, [r4, #20]
 80007c4:	b2f6      	uxtb	r6, r6
 80007c6:	4283      	cmp	r3, r0
 80007c8:	4637      	mov	r7, r6
 80007ca:	dc04      	bgt.n	80007d6 <__swbuf_r+0x42>
 80007cc:	4621      	mov	r1, r4
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 f926 	bl	8000a20 <_fflush_r>
 80007d4:	bb30      	cbnz	r0, 8000824 <__swbuf_r+0x90>
 80007d6:	68a3      	ldr	r3, [r4, #8]
 80007d8:	3b01      	subs	r3, #1
 80007da:	60a3      	str	r3, [r4, #8]
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	6022      	str	r2, [r4, #0]
 80007e2:	701e      	strb	r6, [r3, #0]
 80007e4:	6963      	ldr	r3, [r4, #20]
 80007e6:	3001      	adds	r0, #1
 80007e8:	4283      	cmp	r3, r0
 80007ea:	d004      	beq.n	80007f6 <__swbuf_r+0x62>
 80007ec:	89a3      	ldrh	r3, [r4, #12]
 80007ee:	07db      	lsls	r3, r3, #31
 80007f0:	d506      	bpl.n	8000800 <__swbuf_r+0x6c>
 80007f2:	2e0a      	cmp	r6, #10
 80007f4:	d104      	bne.n	8000800 <__swbuf_r+0x6c>
 80007f6:	4621      	mov	r1, r4
 80007f8:	4628      	mov	r0, r5
 80007fa:	f000 f911 	bl	8000a20 <_fflush_r>
 80007fe:	b988      	cbnz	r0, 8000824 <__swbuf_r+0x90>
 8000800:	4638      	mov	r0, r7
 8000802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <__swbuf_r+0x9c>)
 8000806:	429c      	cmp	r4, r3
 8000808:	d101      	bne.n	800080e <__swbuf_r+0x7a>
 800080a:	68ac      	ldr	r4, [r5, #8]
 800080c:	e7cf      	b.n	80007ae <__swbuf_r+0x1a>
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <__swbuf_r+0xa0>)
 8000810:	429c      	cmp	r4, r3
 8000812:	bf08      	it	eq
 8000814:	68ec      	ldreq	r4, [r5, #12]
 8000816:	e7ca      	b.n	80007ae <__swbuf_r+0x1a>
 8000818:	4621      	mov	r1, r4
 800081a:	4628      	mov	r0, r5
 800081c:	f000 f80c 	bl	8000838 <__swsetup_r>
 8000820:	2800      	cmp	r0, #0
 8000822:	d0cb      	beq.n	80007bc <__swbuf_r+0x28>
 8000824:	f04f 37ff 	mov.w	r7, #4294967295
 8000828:	e7ea      	b.n	8000800 <__swbuf_r+0x6c>
 800082a:	bf00      	nop
 800082c:	08001130 	.word	0x08001130
 8000830:	08001150 	.word	0x08001150
 8000834:	08001110 	.word	0x08001110

08000838 <__swsetup_r>:
 8000838:	4b32      	ldr	r3, [pc, #200]	; (8000904 <__swsetup_r+0xcc>)
 800083a:	b570      	push	{r4, r5, r6, lr}
 800083c:	681d      	ldr	r5, [r3, #0]
 800083e:	4606      	mov	r6, r0
 8000840:	460c      	mov	r4, r1
 8000842:	b125      	cbz	r5, 800084e <__swsetup_r+0x16>
 8000844:	69ab      	ldr	r3, [r5, #24]
 8000846:	b913      	cbnz	r3, 800084e <__swsetup_r+0x16>
 8000848:	4628      	mov	r0, r5
 800084a:	f000 f97d 	bl	8000b48 <__sinit>
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <__swsetup_r+0xd0>)
 8000850:	429c      	cmp	r4, r3
 8000852:	d10f      	bne.n	8000874 <__swsetup_r+0x3c>
 8000854:	686c      	ldr	r4, [r5, #4]
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800085c:	0719      	lsls	r1, r3, #28
 800085e:	d42c      	bmi.n	80008ba <__swsetup_r+0x82>
 8000860:	06dd      	lsls	r5, r3, #27
 8000862:	d411      	bmi.n	8000888 <__swsetup_r+0x50>
 8000864:	2309      	movs	r3, #9
 8000866:	6033      	str	r3, [r6, #0]
 8000868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800086c:	81a3      	strh	r3, [r4, #12]
 800086e:	f04f 30ff 	mov.w	r0, #4294967295
 8000872:	e03e      	b.n	80008f2 <__swsetup_r+0xba>
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <__swsetup_r+0xd4>)
 8000876:	429c      	cmp	r4, r3
 8000878:	d101      	bne.n	800087e <__swsetup_r+0x46>
 800087a:	68ac      	ldr	r4, [r5, #8]
 800087c:	e7eb      	b.n	8000856 <__swsetup_r+0x1e>
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <__swsetup_r+0xd8>)
 8000880:	429c      	cmp	r4, r3
 8000882:	bf08      	it	eq
 8000884:	68ec      	ldreq	r4, [r5, #12]
 8000886:	e7e6      	b.n	8000856 <__swsetup_r+0x1e>
 8000888:	0758      	lsls	r0, r3, #29
 800088a:	d512      	bpl.n	80008b2 <__swsetup_r+0x7a>
 800088c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800088e:	b141      	cbz	r1, 80008a2 <__swsetup_r+0x6a>
 8000890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000894:	4299      	cmp	r1, r3
 8000896:	d002      	beq.n	800089e <__swsetup_r+0x66>
 8000898:	4630      	mov	r0, r6
 800089a:	f000 fa5b 	bl	8000d54 <_free_r>
 800089e:	2300      	movs	r3, #0
 80008a0:	6363      	str	r3, [r4, #52]	; 0x34
 80008a2:	89a3      	ldrh	r3, [r4, #12]
 80008a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008a8:	81a3      	strh	r3, [r4, #12]
 80008aa:	2300      	movs	r3, #0
 80008ac:	6063      	str	r3, [r4, #4]
 80008ae:	6923      	ldr	r3, [r4, #16]
 80008b0:	6023      	str	r3, [r4, #0]
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	81a3      	strh	r3, [r4, #12]
 80008ba:	6923      	ldr	r3, [r4, #16]
 80008bc:	b94b      	cbnz	r3, 80008d2 <__swsetup_r+0x9a>
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c8:	d003      	beq.n	80008d2 <__swsetup_r+0x9a>
 80008ca:	4621      	mov	r1, r4
 80008cc:	4630      	mov	r0, r6
 80008ce:	f000 fa01 	bl	8000cd4 <__smakebuf_r>
 80008d2:	89a0      	ldrh	r0, [r4, #12]
 80008d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008d8:	f010 0301 	ands.w	r3, r0, #1
 80008dc:	d00a      	beq.n	80008f4 <__swsetup_r+0xbc>
 80008de:	2300      	movs	r3, #0
 80008e0:	60a3      	str	r3, [r4, #8]
 80008e2:	6963      	ldr	r3, [r4, #20]
 80008e4:	425b      	negs	r3, r3
 80008e6:	61a3      	str	r3, [r4, #24]
 80008e8:	6923      	ldr	r3, [r4, #16]
 80008ea:	b943      	cbnz	r3, 80008fe <__swsetup_r+0xc6>
 80008ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008f0:	d1ba      	bne.n	8000868 <__swsetup_r+0x30>
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	0781      	lsls	r1, r0, #30
 80008f6:	bf58      	it	pl
 80008f8:	6963      	ldrpl	r3, [r4, #20]
 80008fa:	60a3      	str	r3, [r4, #8]
 80008fc:	e7f4      	b.n	80008e8 <__swsetup_r+0xb0>
 80008fe:	2000      	movs	r0, #0
 8000900:	e7f7      	b.n	80008f2 <__swsetup_r+0xba>
 8000902:	bf00      	nop
 8000904:	20000010 	.word	0x20000010
 8000908:	08001130 	.word	0x08001130
 800090c:	08001150 	.word	0x08001150
 8000910:	08001110 	.word	0x08001110

08000914 <__sflush_r>:
 8000914:	898a      	ldrh	r2, [r1, #12]
 8000916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800091a:	4605      	mov	r5, r0
 800091c:	0710      	lsls	r0, r2, #28
 800091e:	460c      	mov	r4, r1
 8000920:	d458      	bmi.n	80009d4 <__sflush_r+0xc0>
 8000922:	684b      	ldr	r3, [r1, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dc05      	bgt.n	8000934 <__sflush_r+0x20>
 8000928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc02      	bgt.n	8000934 <__sflush_r+0x20>
 800092e:	2000      	movs	r0, #0
 8000930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000936:	2e00      	cmp	r6, #0
 8000938:	d0f9      	beq.n	800092e <__sflush_r+0x1a>
 800093a:	2300      	movs	r3, #0
 800093c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000940:	682f      	ldr	r7, [r5, #0]
 8000942:	602b      	str	r3, [r5, #0]
 8000944:	d032      	beq.n	80009ac <__sflush_r+0x98>
 8000946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	075a      	lsls	r2, r3, #29
 800094c:	d505      	bpl.n	800095a <__sflush_r+0x46>
 800094e:	6863      	ldr	r3, [r4, #4]
 8000950:	1ac0      	subs	r0, r0, r3
 8000952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000954:	b10b      	cbz	r3, 800095a <__sflush_r+0x46>
 8000956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000958:	1ac0      	subs	r0, r0, r3
 800095a:	2300      	movs	r3, #0
 800095c:	4602      	mov	r2, r0
 800095e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000960:	6a21      	ldr	r1, [r4, #32]
 8000962:	4628      	mov	r0, r5
 8000964:	47b0      	blx	r6
 8000966:	1c43      	adds	r3, r0, #1
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	d106      	bne.n	800097a <__sflush_r+0x66>
 800096c:	6829      	ldr	r1, [r5, #0]
 800096e:	291d      	cmp	r1, #29
 8000970:	d82c      	bhi.n	80009cc <__sflush_r+0xb8>
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <__sflush_r+0x108>)
 8000974:	40ca      	lsrs	r2, r1
 8000976:	07d6      	lsls	r6, r2, #31
 8000978:	d528      	bpl.n	80009cc <__sflush_r+0xb8>
 800097a:	2200      	movs	r2, #0
 800097c:	6062      	str	r2, [r4, #4]
 800097e:	04d9      	lsls	r1, r3, #19
 8000980:	6922      	ldr	r2, [r4, #16]
 8000982:	6022      	str	r2, [r4, #0]
 8000984:	d504      	bpl.n	8000990 <__sflush_r+0x7c>
 8000986:	1c42      	adds	r2, r0, #1
 8000988:	d101      	bne.n	800098e <__sflush_r+0x7a>
 800098a:	682b      	ldr	r3, [r5, #0]
 800098c:	b903      	cbnz	r3, 8000990 <__sflush_r+0x7c>
 800098e:	6560      	str	r0, [r4, #84]	; 0x54
 8000990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000992:	602f      	str	r7, [r5, #0]
 8000994:	2900      	cmp	r1, #0
 8000996:	d0ca      	beq.n	800092e <__sflush_r+0x1a>
 8000998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800099c:	4299      	cmp	r1, r3
 800099e:	d002      	beq.n	80009a6 <__sflush_r+0x92>
 80009a0:	4628      	mov	r0, r5
 80009a2:	f000 f9d7 	bl	8000d54 <_free_r>
 80009a6:	2000      	movs	r0, #0
 80009a8:	6360      	str	r0, [r4, #52]	; 0x34
 80009aa:	e7c1      	b.n	8000930 <__sflush_r+0x1c>
 80009ac:	6a21      	ldr	r1, [r4, #32]
 80009ae:	2301      	movs	r3, #1
 80009b0:	4628      	mov	r0, r5
 80009b2:	47b0      	blx	r6
 80009b4:	1c41      	adds	r1, r0, #1
 80009b6:	d1c7      	bne.n	8000948 <__sflush_r+0x34>
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0c4      	beq.n	8000948 <__sflush_r+0x34>
 80009be:	2b1d      	cmp	r3, #29
 80009c0:	d001      	beq.n	80009c6 <__sflush_r+0xb2>
 80009c2:	2b16      	cmp	r3, #22
 80009c4:	d101      	bne.n	80009ca <__sflush_r+0xb6>
 80009c6:	602f      	str	r7, [r5, #0]
 80009c8:	e7b1      	b.n	800092e <__sflush_r+0x1a>
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	81a3      	strh	r3, [r4, #12]
 80009d2:	e7ad      	b.n	8000930 <__sflush_r+0x1c>
 80009d4:	690f      	ldr	r7, [r1, #16]
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d0a9      	beq.n	800092e <__sflush_r+0x1a>
 80009da:	0793      	lsls	r3, r2, #30
 80009dc:	680e      	ldr	r6, [r1, #0]
 80009de:	bf08      	it	eq
 80009e0:	694b      	ldreq	r3, [r1, #20]
 80009e2:	600f      	str	r7, [r1, #0]
 80009e4:	bf18      	it	ne
 80009e6:	2300      	movne	r3, #0
 80009e8:	eba6 0807 	sub.w	r8, r6, r7
 80009ec:	608b      	str	r3, [r1, #8]
 80009ee:	f1b8 0f00 	cmp.w	r8, #0
 80009f2:	dd9c      	ble.n	800092e <__sflush_r+0x1a>
 80009f4:	6a21      	ldr	r1, [r4, #32]
 80009f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009f8:	4643      	mov	r3, r8
 80009fa:	463a      	mov	r2, r7
 80009fc:	4628      	mov	r0, r5
 80009fe:	47b0      	blx	r6
 8000a00:	2800      	cmp	r0, #0
 8000a02:	dc06      	bgt.n	8000a12 <__sflush_r+0xfe>
 8000a04:	89a3      	ldrh	r3, [r4, #12]
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	81a3      	strh	r3, [r4, #12]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	e78e      	b.n	8000930 <__sflush_r+0x1c>
 8000a12:	4407      	add	r7, r0
 8000a14:	eba8 0800 	sub.w	r8, r8, r0
 8000a18:	e7e9      	b.n	80009ee <__sflush_r+0xda>
 8000a1a:	bf00      	nop
 8000a1c:	20400001 	.word	0x20400001

08000a20 <_fflush_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	690b      	ldr	r3, [r1, #16]
 8000a24:	4605      	mov	r5, r0
 8000a26:	460c      	mov	r4, r1
 8000a28:	b913      	cbnz	r3, 8000a30 <_fflush_r+0x10>
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
 8000a30:	b118      	cbz	r0, 8000a3a <_fflush_r+0x1a>
 8000a32:	6983      	ldr	r3, [r0, #24]
 8000a34:	b90b      	cbnz	r3, 8000a3a <_fflush_r+0x1a>
 8000a36:	f000 f887 	bl	8000b48 <__sinit>
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_fflush_r+0x6c>)
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d11b      	bne.n	8000a78 <_fflush_r+0x58>
 8000a40:	686c      	ldr	r4, [r5, #4]
 8000a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0ef      	beq.n	8000a2a <_fflush_r+0xa>
 8000a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a4c:	07d0      	lsls	r0, r2, #31
 8000a4e:	d404      	bmi.n	8000a5a <_fflush_r+0x3a>
 8000a50:	0599      	lsls	r1, r3, #22
 8000a52:	d402      	bmi.n	8000a5a <_fflush_r+0x3a>
 8000a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a56:	f000 f915 	bl	8000c84 <__retarget_lock_acquire_recursive>
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	f7ff ff59 	bl	8000914 <__sflush_r>
 8000a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a64:	07da      	lsls	r2, r3, #31
 8000a66:	4605      	mov	r5, r0
 8000a68:	d4e0      	bmi.n	8000a2c <_fflush_r+0xc>
 8000a6a:	89a3      	ldrh	r3, [r4, #12]
 8000a6c:	059b      	lsls	r3, r3, #22
 8000a6e:	d4dd      	bmi.n	8000a2c <_fflush_r+0xc>
 8000a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a72:	f000 f908 	bl	8000c86 <__retarget_lock_release_recursive>
 8000a76:	e7d9      	b.n	8000a2c <_fflush_r+0xc>
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <_fflush_r+0x70>)
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	d101      	bne.n	8000a82 <_fflush_r+0x62>
 8000a7e:	68ac      	ldr	r4, [r5, #8]
 8000a80:	e7df      	b.n	8000a42 <_fflush_r+0x22>
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <_fflush_r+0x74>)
 8000a84:	429c      	cmp	r4, r3
 8000a86:	bf08      	it	eq
 8000a88:	68ec      	ldreq	r4, [r5, #12]
 8000a8a:	e7da      	b.n	8000a42 <_fflush_r+0x22>
 8000a8c:	08001130 	.word	0x08001130
 8000a90:	08001150 	.word	0x08001150
 8000a94:	08001110 	.word	0x08001110

08000a98 <std>:
 8000a98:	2300      	movs	r3, #0
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aa6:	6083      	str	r3, [r0, #8]
 8000aa8:	8181      	strh	r1, [r0, #12]
 8000aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8000aac:	81c2      	strh	r2, [r0, #14]
 8000aae:	6183      	str	r3, [r0, #24]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	305c      	adds	r0, #92	; 0x5c
 8000ab6:	f7ff fdef 	bl	8000698 <memset>
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <std+0x38>)
 8000abc:	6263      	str	r3, [r4, #36]	; 0x24
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <std+0x3c>)
 8000ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <std+0x40>)
 8000ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <std+0x44>)
 8000ac8:	6224      	str	r4, [r4, #32]
 8000aca:	6323      	str	r3, [r4, #48]	; 0x30
 8000acc:	bd10      	pop	{r4, pc}
 8000ace:	bf00      	nop
 8000ad0:	08000f35 	.word	0x08000f35
 8000ad4:	08000f57 	.word	0x08000f57
 8000ad8:	08000f8f 	.word	0x08000f8f
 8000adc:	08000fb3 	.word	0x08000fb3

08000ae0 <_cleanup_r>:
 8000ae0:	4901      	ldr	r1, [pc, #4]	; (8000ae8 <_cleanup_r+0x8>)
 8000ae2:	f000 b8af 	b.w	8000c44 <_fwalk_reent>
 8000ae6:	bf00      	nop
 8000ae8:	08000a21 	.word	0x08000a21

08000aec <__sfmoreglue>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2268      	movs	r2, #104	; 0x68
 8000af0:	1e4d      	subs	r5, r1, #1
 8000af2:	4355      	muls	r5, r2
 8000af4:	460e      	mov	r6, r1
 8000af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000afa:	f000 f997 	bl	8000e2c <_malloc_r>
 8000afe:	4604      	mov	r4, r0
 8000b00:	b140      	cbz	r0, 8000b14 <__sfmoreglue+0x28>
 8000b02:	2100      	movs	r1, #0
 8000b04:	e9c0 1600 	strd	r1, r6, [r0]
 8000b08:	300c      	adds	r0, #12
 8000b0a:	60a0      	str	r0, [r4, #8]
 8000b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b10:	f7ff fdc2 	bl	8000698 <memset>
 8000b14:	4620      	mov	r0, r4
 8000b16:	bd70      	pop	{r4, r5, r6, pc}

08000b18 <__sfp_lock_acquire>:
 8000b18:	4801      	ldr	r0, [pc, #4]	; (8000b20 <__sfp_lock_acquire+0x8>)
 8000b1a:	f000 b8b3 	b.w	8000c84 <__retarget_lock_acquire_recursive>
 8000b1e:	bf00      	nop
 8000b20:	200000a9 	.word	0x200000a9

08000b24 <__sfp_lock_release>:
 8000b24:	4801      	ldr	r0, [pc, #4]	; (8000b2c <__sfp_lock_release+0x8>)
 8000b26:	f000 b8ae 	b.w	8000c86 <__retarget_lock_release_recursive>
 8000b2a:	bf00      	nop
 8000b2c:	200000a9 	.word	0x200000a9

08000b30 <__sinit_lock_acquire>:
 8000b30:	4801      	ldr	r0, [pc, #4]	; (8000b38 <__sinit_lock_acquire+0x8>)
 8000b32:	f000 b8a7 	b.w	8000c84 <__retarget_lock_acquire_recursive>
 8000b36:	bf00      	nop
 8000b38:	200000aa 	.word	0x200000aa

08000b3c <__sinit_lock_release>:
 8000b3c:	4801      	ldr	r0, [pc, #4]	; (8000b44 <__sinit_lock_release+0x8>)
 8000b3e:	f000 b8a2 	b.w	8000c86 <__retarget_lock_release_recursive>
 8000b42:	bf00      	nop
 8000b44:	200000aa 	.word	0x200000aa

08000b48 <__sinit>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	f7ff fff0 	bl	8000b30 <__sinit_lock_acquire>
 8000b50:	69a3      	ldr	r3, [r4, #24]
 8000b52:	b11b      	cbz	r3, 8000b5c <__sinit+0x14>
 8000b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b58:	f7ff bff0 	b.w	8000b3c <__sinit_lock_release>
 8000b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b60:	6523      	str	r3, [r4, #80]	; 0x50
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <__sinit+0x68>)
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <__sinit+0x6c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	bf04      	itt	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	61a3      	streq	r3, [r4, #24]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 f820 	bl	8000bb8 <__sfp>
 8000b78:	6060      	str	r0, [r4, #4]
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 f81c 	bl	8000bb8 <__sfp>
 8000b80:	60a0      	str	r0, [r4, #8]
 8000b82:	4620      	mov	r0, r4
 8000b84:	f000 f818 	bl	8000bb8 <__sfp>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60e0      	str	r0, [r4, #12]
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	6860      	ldr	r0, [r4, #4]
 8000b90:	f7ff ff82 	bl	8000a98 <std>
 8000b94:	68a0      	ldr	r0, [r4, #8]
 8000b96:	2201      	movs	r2, #1
 8000b98:	2109      	movs	r1, #9
 8000b9a:	f7ff ff7d 	bl	8000a98 <std>
 8000b9e:	68e0      	ldr	r0, [r4, #12]
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	2112      	movs	r1, #18
 8000ba4:	f7ff ff78 	bl	8000a98 <std>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61a3      	str	r3, [r4, #24]
 8000bac:	e7d2      	b.n	8000b54 <__sinit+0xc>
 8000bae:	bf00      	nop
 8000bb0:	0800110c 	.word	0x0800110c
 8000bb4:	08000ae1 	.word	0x08000ae1

08000bb8 <__sfp>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	4607      	mov	r7, r0
 8000bbc:	f7ff ffac 	bl	8000b18 <__sfp_lock_acquire>
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <__sfp+0x84>)
 8000bc2:	681e      	ldr	r6, [r3, #0]
 8000bc4:	69b3      	ldr	r3, [r6, #24]
 8000bc6:	b913      	cbnz	r3, 8000bce <__sfp+0x16>
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f7ff ffbd 	bl	8000b48 <__sinit>
 8000bce:	3648      	adds	r6, #72	; 0x48
 8000bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	d503      	bpl.n	8000be0 <__sfp+0x28>
 8000bd8:	6833      	ldr	r3, [r6, #0]
 8000bda:	b30b      	cbz	r3, 8000c20 <__sfp+0x68>
 8000bdc:	6836      	ldr	r6, [r6, #0]
 8000bde:	e7f7      	b.n	8000bd0 <__sfp+0x18>
 8000be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000be4:	b9d5      	cbnz	r5, 8000c1c <__sfp+0x64>
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <__sfp+0x88>)
 8000be8:	60e3      	str	r3, [r4, #12]
 8000bea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bee:	6665      	str	r5, [r4, #100]	; 0x64
 8000bf0:	f000 f847 	bl	8000c82 <__retarget_lock_init_recursive>
 8000bf4:	f7ff ff96 	bl	8000b24 <__sfp_lock_release>
 8000bf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c00:	6025      	str	r5, [r4, #0]
 8000c02:	61a5      	str	r5, [r4, #24]
 8000c04:	2208      	movs	r2, #8
 8000c06:	4629      	mov	r1, r5
 8000c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c0c:	f7ff fd44 	bl	8000698 <memset>
 8000c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c18:	4620      	mov	r0, r4
 8000c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c1c:	3468      	adds	r4, #104	; 0x68
 8000c1e:	e7d9      	b.n	8000bd4 <__sfp+0x1c>
 8000c20:	2104      	movs	r1, #4
 8000c22:	4638      	mov	r0, r7
 8000c24:	f7ff ff62 	bl	8000aec <__sfmoreglue>
 8000c28:	4604      	mov	r4, r0
 8000c2a:	6030      	str	r0, [r6, #0]
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1d5      	bne.n	8000bdc <__sfp+0x24>
 8000c30:	f7ff ff78 	bl	8000b24 <__sfp_lock_release>
 8000c34:	230c      	movs	r3, #12
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e7ee      	b.n	8000c18 <__sfp+0x60>
 8000c3a:	bf00      	nop
 8000c3c:	0800110c 	.word	0x0800110c
 8000c40:	ffff0001 	.word	0xffff0001

08000c44 <_fwalk_reent>:
 8000c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c48:	4606      	mov	r6, r0
 8000c4a:	4688      	mov	r8, r1
 8000c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c50:	2700      	movs	r7, #0
 8000c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c56:	f1b9 0901 	subs.w	r9, r9, #1
 8000c5a:	d505      	bpl.n	8000c68 <_fwalk_reent+0x24>
 8000c5c:	6824      	ldr	r4, [r4, #0]
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d1f7      	bne.n	8000c52 <_fwalk_reent+0xe>
 8000c62:	4638      	mov	r0, r7
 8000c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c68:	89ab      	ldrh	r3, [r5, #12]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d907      	bls.n	8000c7e <_fwalk_reent+0x3a>
 8000c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c72:	3301      	adds	r3, #1
 8000c74:	d003      	beq.n	8000c7e <_fwalk_reent+0x3a>
 8000c76:	4629      	mov	r1, r5
 8000c78:	4630      	mov	r0, r6
 8000c7a:	47c0      	blx	r8
 8000c7c:	4307      	orrs	r7, r0
 8000c7e:	3568      	adds	r5, #104	; 0x68
 8000c80:	e7e9      	b.n	8000c56 <_fwalk_reent+0x12>

08000c82 <__retarget_lock_init_recursive>:
 8000c82:	4770      	bx	lr

08000c84 <__retarget_lock_acquire_recursive>:
 8000c84:	4770      	bx	lr

08000c86 <__retarget_lock_release_recursive>:
 8000c86:	4770      	bx	lr

08000c88 <__swhatbuf_r>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	460e      	mov	r6, r1
 8000c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c90:	2900      	cmp	r1, #0
 8000c92:	b096      	sub	sp, #88	; 0x58
 8000c94:	4614      	mov	r4, r2
 8000c96:	461d      	mov	r5, r3
 8000c98:	da08      	bge.n	8000cac <__swhatbuf_r+0x24>
 8000c9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	602a      	str	r2, [r5, #0]
 8000ca2:	061a      	lsls	r2, r3, #24
 8000ca4:	d410      	bmi.n	8000cc8 <__swhatbuf_r+0x40>
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	e00e      	b.n	8000cca <__swhatbuf_r+0x42>
 8000cac:	466a      	mov	r2, sp
 8000cae:	f000 f9a7 	bl	8001000 <_fstat_r>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	dbf1      	blt.n	8000c9a <__swhatbuf_r+0x12>
 8000cb6:	9a01      	ldr	r2, [sp, #4]
 8000cb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cc0:	425a      	negs	r2, r3
 8000cc2:	415a      	adcs	r2, r3
 8000cc4:	602a      	str	r2, [r5, #0]
 8000cc6:	e7ee      	b.n	8000ca6 <__swhatbuf_r+0x1e>
 8000cc8:	2340      	movs	r3, #64	; 0x40
 8000cca:	2000      	movs	r0, #0
 8000ccc:	6023      	str	r3, [r4, #0]
 8000cce:	b016      	add	sp, #88	; 0x58
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cd4 <__smakebuf_r>:
 8000cd4:	898b      	ldrh	r3, [r1, #12]
 8000cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cd8:	079d      	lsls	r5, r3, #30
 8000cda:	4606      	mov	r6, r0
 8000cdc:	460c      	mov	r4, r1
 8000cde:	d507      	bpl.n	8000cf0 <__smakebuf_r+0x1c>
 8000ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	6123      	str	r3, [r4, #16]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	6163      	str	r3, [r4, #20]
 8000cec:	b002      	add	sp, #8
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
 8000cf0:	ab01      	add	r3, sp, #4
 8000cf2:	466a      	mov	r2, sp
 8000cf4:	f7ff ffc8 	bl	8000c88 <__swhatbuf_r>
 8000cf8:	9900      	ldr	r1, [sp, #0]
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	f000 f895 	bl	8000e2c <_malloc_r>
 8000d02:	b948      	cbnz	r0, 8000d18 <__smakebuf_r+0x44>
 8000d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d08:	059a      	lsls	r2, r3, #22
 8000d0a:	d4ef      	bmi.n	8000cec <__smakebuf_r+0x18>
 8000d0c:	f023 0303 	bic.w	r3, r3, #3
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	81a3      	strh	r3, [r4, #12]
 8000d16:	e7e3      	b.n	8000ce0 <__smakebuf_r+0xc>
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <__smakebuf_r+0x7c>)
 8000d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	6020      	str	r0, [r4, #0]
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	81a3      	strh	r3, [r4, #12]
 8000d26:	9b00      	ldr	r3, [sp, #0]
 8000d28:	6163      	str	r3, [r4, #20]
 8000d2a:	9b01      	ldr	r3, [sp, #4]
 8000d2c:	6120      	str	r0, [r4, #16]
 8000d2e:	b15b      	cbz	r3, 8000d48 <__smakebuf_r+0x74>
 8000d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d34:	4630      	mov	r0, r6
 8000d36:	f000 f975 	bl	8001024 <_isatty_r>
 8000d3a:	b128      	cbz	r0, 8000d48 <__smakebuf_r+0x74>
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f023 0303 	bic.w	r3, r3, #3
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	81a3      	strh	r3, [r4, #12]
 8000d48:	89a0      	ldrh	r0, [r4, #12]
 8000d4a:	4305      	orrs	r5, r0
 8000d4c:	81a5      	strh	r5, [r4, #12]
 8000d4e:	e7cd      	b.n	8000cec <__smakebuf_r+0x18>
 8000d50:	08000ae1 	.word	0x08000ae1

08000d54 <_free_r>:
 8000d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d044      	beq.n	8000de4 <_free_r+0x90>
 8000d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d5e:	9001      	str	r0, [sp, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f1a1 0404 	sub.w	r4, r1, #4
 8000d66:	bfb8      	it	lt
 8000d68:	18e4      	addlt	r4, r4, r3
 8000d6a:	f000 f97d 	bl	8001068 <__malloc_lock>
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <_free_r+0x94>)
 8000d70:	9801      	ldr	r0, [sp, #4]
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	b933      	cbnz	r3, 8000d84 <_free_r+0x30>
 8000d76:	6063      	str	r3, [r4, #4]
 8000d78:	6014      	str	r4, [r2, #0]
 8000d7a:	b003      	add	sp, #12
 8000d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d80:	f000 b978 	b.w	8001074 <__malloc_unlock>
 8000d84:	42a3      	cmp	r3, r4
 8000d86:	d908      	bls.n	8000d9a <_free_r+0x46>
 8000d88:	6825      	ldr	r5, [r4, #0]
 8000d8a:	1961      	adds	r1, r4, r5
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	bf01      	itttt	eq
 8000d90:	6819      	ldreq	r1, [r3, #0]
 8000d92:	685b      	ldreq	r3, [r3, #4]
 8000d94:	1949      	addeq	r1, r1, r5
 8000d96:	6021      	streq	r1, [r4, #0]
 8000d98:	e7ed      	b.n	8000d76 <_free_r+0x22>
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	b10b      	cbz	r3, 8000da4 <_free_r+0x50>
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	d9fa      	bls.n	8000d9a <_free_r+0x46>
 8000da4:	6811      	ldr	r1, [r2, #0]
 8000da6:	1855      	adds	r5, r2, r1
 8000da8:	42a5      	cmp	r5, r4
 8000daa:	d10b      	bne.n	8000dc4 <_free_r+0x70>
 8000dac:	6824      	ldr	r4, [r4, #0]
 8000dae:	4421      	add	r1, r4
 8000db0:	1854      	adds	r4, r2, r1
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	6011      	str	r1, [r2, #0]
 8000db6:	d1e0      	bne.n	8000d7a <_free_r+0x26>
 8000db8:	681c      	ldr	r4, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	6053      	str	r3, [r2, #4]
 8000dbe:	4421      	add	r1, r4
 8000dc0:	6011      	str	r1, [r2, #0]
 8000dc2:	e7da      	b.n	8000d7a <_free_r+0x26>
 8000dc4:	d902      	bls.n	8000dcc <_free_r+0x78>
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	6003      	str	r3, [r0, #0]
 8000dca:	e7d6      	b.n	8000d7a <_free_r+0x26>
 8000dcc:	6825      	ldr	r5, [r4, #0]
 8000dce:	1961      	adds	r1, r4, r5
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf04      	itt	eq
 8000dd4:	6819      	ldreq	r1, [r3, #0]
 8000dd6:	685b      	ldreq	r3, [r3, #4]
 8000dd8:	6063      	str	r3, [r4, #4]
 8000dda:	bf04      	itt	eq
 8000ddc:	1949      	addeq	r1, r1, r5
 8000dde:	6021      	streq	r1, [r4, #0]
 8000de0:	6054      	str	r4, [r2, #4]
 8000de2:	e7ca      	b.n	8000d7a <_free_r+0x26>
 8000de4:	b003      	add	sp, #12
 8000de6:	bd30      	pop	{r4, r5, pc}
 8000de8:	200000ac 	.word	0x200000ac

08000dec <sbrk_aligned>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4e0e      	ldr	r6, [pc, #56]	; (8000e28 <sbrk_aligned+0x3c>)
 8000df0:	460c      	mov	r4, r1
 8000df2:	6831      	ldr	r1, [r6, #0]
 8000df4:	4605      	mov	r5, r0
 8000df6:	b911      	cbnz	r1, 8000dfe <sbrk_aligned+0x12>
 8000df8:	f000 f88c 	bl	8000f14 <_sbrk_r>
 8000dfc:	6030      	str	r0, [r6, #0]
 8000dfe:	4621      	mov	r1, r4
 8000e00:	4628      	mov	r0, r5
 8000e02:	f000 f887 	bl	8000f14 <_sbrk_r>
 8000e06:	1c43      	adds	r3, r0, #1
 8000e08:	d00a      	beq.n	8000e20 <sbrk_aligned+0x34>
 8000e0a:	1cc4      	adds	r4, r0, #3
 8000e0c:	f024 0403 	bic.w	r4, r4, #3
 8000e10:	42a0      	cmp	r0, r4
 8000e12:	d007      	beq.n	8000e24 <sbrk_aligned+0x38>
 8000e14:	1a21      	subs	r1, r4, r0
 8000e16:	4628      	mov	r0, r5
 8000e18:	f000 f87c 	bl	8000f14 <_sbrk_r>
 8000e1c:	3001      	adds	r0, #1
 8000e1e:	d101      	bne.n	8000e24 <sbrk_aligned+0x38>
 8000e20:	f04f 34ff 	mov.w	r4, #4294967295
 8000e24:	4620      	mov	r0, r4
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	200000b0 	.word	0x200000b0

08000e2c <_malloc_r>:
 8000e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e30:	1ccd      	adds	r5, r1, #3
 8000e32:	f025 0503 	bic.w	r5, r5, #3
 8000e36:	3508      	adds	r5, #8
 8000e38:	2d0c      	cmp	r5, #12
 8000e3a:	bf38      	it	cc
 8000e3c:	250c      	movcc	r5, #12
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	4607      	mov	r7, r0
 8000e42:	db01      	blt.n	8000e48 <_malloc_r+0x1c>
 8000e44:	42a9      	cmp	r1, r5
 8000e46:	d905      	bls.n	8000e54 <_malloc_r+0x28>
 8000e48:	230c      	movs	r3, #12
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e54:	4e2e      	ldr	r6, [pc, #184]	; (8000f10 <_malloc_r+0xe4>)
 8000e56:	f000 f907 	bl	8001068 <__malloc_lock>
 8000e5a:	6833      	ldr	r3, [r6, #0]
 8000e5c:	461c      	mov	r4, r3
 8000e5e:	bb34      	cbnz	r4, 8000eae <_malloc_r+0x82>
 8000e60:	4629      	mov	r1, r5
 8000e62:	4638      	mov	r0, r7
 8000e64:	f7ff ffc2 	bl	8000dec <sbrk_aligned>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	d14d      	bne.n	8000f0a <_malloc_r+0xde>
 8000e6e:	6834      	ldr	r4, [r6, #0]
 8000e70:	4626      	mov	r6, r4
 8000e72:	2e00      	cmp	r6, #0
 8000e74:	d140      	bne.n	8000ef8 <_malloc_r+0xcc>
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	eb04 0803 	add.w	r8, r4, r3
 8000e80:	f000 f848 	bl	8000f14 <_sbrk_r>
 8000e84:	4580      	cmp	r8, r0
 8000e86:	d13a      	bne.n	8000efe <_malloc_r+0xd2>
 8000e88:	6821      	ldr	r1, [r4, #0]
 8000e8a:	3503      	adds	r5, #3
 8000e8c:	1a6d      	subs	r5, r5, r1
 8000e8e:	f025 0503 	bic.w	r5, r5, #3
 8000e92:	3508      	adds	r5, #8
 8000e94:	2d0c      	cmp	r5, #12
 8000e96:	bf38      	it	cc
 8000e98:	250c      	movcc	r5, #12
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	f7ff ffa5 	bl	8000dec <sbrk_aligned>
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	d02b      	beq.n	8000efe <_malloc_r+0xd2>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	442b      	add	r3, r5
 8000eaa:	6023      	str	r3, [r4, #0]
 8000eac:	e00e      	b.n	8000ecc <_malloc_r+0xa0>
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	1b52      	subs	r2, r2, r5
 8000eb2:	d41e      	bmi.n	8000ef2 <_malloc_r+0xc6>
 8000eb4:	2a0b      	cmp	r2, #11
 8000eb6:	d916      	bls.n	8000ee6 <_malloc_r+0xba>
 8000eb8:	1961      	adds	r1, r4, r5
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	6025      	str	r5, [r4, #0]
 8000ebe:	bf18      	it	ne
 8000ec0:	6059      	strne	r1, [r3, #4]
 8000ec2:	6863      	ldr	r3, [r4, #4]
 8000ec4:	bf08      	it	eq
 8000ec6:	6031      	streq	r1, [r6, #0]
 8000ec8:	5162      	str	r2, [r4, r5]
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	4638      	mov	r0, r7
 8000ece:	f104 060b 	add.w	r6, r4, #11
 8000ed2:	f000 f8cf 	bl	8001074 <__malloc_unlock>
 8000ed6:	f026 0607 	bic.w	r6, r6, #7
 8000eda:	1d23      	adds	r3, r4, #4
 8000edc:	1af2      	subs	r2, r6, r3
 8000ede:	d0b6      	beq.n	8000e4e <_malloc_r+0x22>
 8000ee0:	1b9b      	subs	r3, r3, r6
 8000ee2:	50a3      	str	r3, [r4, r2]
 8000ee4:	e7b3      	b.n	8000e4e <_malloc_r+0x22>
 8000ee6:	6862      	ldr	r2, [r4, #4]
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	bf0c      	ite	eq
 8000eec:	6032      	streq	r2, [r6, #0]
 8000eee:	605a      	strne	r2, [r3, #4]
 8000ef0:	e7ec      	b.n	8000ecc <_malloc_r+0xa0>
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	6864      	ldr	r4, [r4, #4]
 8000ef6:	e7b2      	b.n	8000e5e <_malloc_r+0x32>
 8000ef8:	4634      	mov	r4, r6
 8000efa:	6876      	ldr	r6, [r6, #4]
 8000efc:	e7b9      	b.n	8000e72 <_malloc_r+0x46>
 8000efe:	230c      	movs	r3, #12
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4638      	mov	r0, r7
 8000f04:	f000 f8b6 	bl	8001074 <__malloc_unlock>
 8000f08:	e7a1      	b.n	8000e4e <_malloc_r+0x22>
 8000f0a:	6025      	str	r5, [r4, #0]
 8000f0c:	e7de      	b.n	8000ecc <_malloc_r+0xa0>
 8000f0e:	bf00      	nop
 8000f10:	200000ac 	.word	0x200000ac

08000f14 <_sbrk_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4d06      	ldr	r5, [pc, #24]	; (8000f30 <_sbrk_r+0x1c>)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	602b      	str	r3, [r5, #0]
 8000f20:	f7ff fb30 	bl	8000584 <_sbrk>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_sbrk_r+0x1a>
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_sbrk_r+0x1a>
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	200000b4 	.word	0x200000b4

08000f34 <__sread>:
 8000f34:	b510      	push	{r4, lr}
 8000f36:	460c      	mov	r4, r1
 8000f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f3c:	f000 f8a0 	bl	8001080 <_read_r>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	bfab      	itete	ge
 8000f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f46:	89a3      	ldrhlt	r3, [r4, #12]
 8000f48:	181b      	addge	r3, r3, r0
 8000f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f4e:	bfac      	ite	ge
 8000f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f52:	81a3      	strhlt	r3, [r4, #12]
 8000f54:	bd10      	pop	{r4, pc}

08000f56 <__swrite>:
 8000f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5a:	461f      	mov	r7, r3
 8000f5c:	898b      	ldrh	r3, [r1, #12]
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	4605      	mov	r5, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	4616      	mov	r6, r2
 8000f66:	d505      	bpl.n	8000f74 <__swrite+0x1e>
 8000f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f000 f868 	bl	8001044 <_lseek_r>
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f7e:	81a3      	strh	r3, [r4, #12]
 8000f80:	4632      	mov	r2, r6
 8000f82:	463b      	mov	r3, r7
 8000f84:	4628      	mov	r0, r5
 8000f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8a:	f000 b817 	b.w	8000fbc <_write_r>

08000f8e <__sseek>:
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	460c      	mov	r4, r1
 8000f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f96:	f000 f855 	bl	8001044 <_lseek_r>
 8000f9a:	1c43      	adds	r3, r0, #1
 8000f9c:	89a3      	ldrh	r3, [r4, #12]
 8000f9e:	bf15      	itete	ne
 8000fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000faa:	81a3      	strheq	r3, [r4, #12]
 8000fac:	bf18      	it	ne
 8000fae:	81a3      	strhne	r3, [r4, #12]
 8000fb0:	bd10      	pop	{r4, pc}

08000fb2 <__sclose>:
 8000fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb6:	f000 b813 	b.w	8000fe0 <_close_r>
	...

08000fbc <_write_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d07      	ldr	r5, [pc, #28]	; (8000fdc <_write_r+0x20>)
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	602a      	str	r2, [r5, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f7ff fa8a 	bl	80004e4 <_write>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_write_r+0x1e>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_write_r+0x1e>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	200000b4 	.word	0x200000b4

08000fe0 <_close_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d06      	ldr	r5, [pc, #24]	; (8000ffc <_close_r+0x1c>)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	602b      	str	r3, [r5, #0]
 8000fec:	f7ff fa96 	bl	800051c <_close>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_close_r+0x1a>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_close_r+0x1a>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200000b4 	.word	0x200000b4

08001000 <_fstat_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4d07      	ldr	r5, [pc, #28]	; (8001020 <_fstat_r+0x20>)
 8001004:	2300      	movs	r3, #0
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	602b      	str	r3, [r5, #0]
 800100e:	f7ff fa91 	bl	8000534 <_fstat>
 8001012:	1c43      	adds	r3, r0, #1
 8001014:	d102      	bne.n	800101c <_fstat_r+0x1c>
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	b103      	cbz	r3, 800101c <_fstat_r+0x1c>
 800101a:	6023      	str	r3, [r4, #0]
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	bf00      	nop
 8001020:	200000b4 	.word	0x200000b4

08001024 <_isatty_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4d06      	ldr	r5, [pc, #24]	; (8001040 <_isatty_r+0x1c>)
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	4608      	mov	r0, r1
 800102e:	602b      	str	r3, [r5, #0]
 8001030:	f7ff fa90 	bl	8000554 <_isatty>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d102      	bne.n	800103e <_isatty_r+0x1a>
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	b103      	cbz	r3, 800103e <_isatty_r+0x1a>
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	bd38      	pop	{r3, r4, r5, pc}
 8001040:	200000b4 	.word	0x200000b4

08001044 <_lseek_r>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4d07      	ldr	r5, [pc, #28]	; (8001064 <_lseek_r+0x20>)
 8001048:	4604      	mov	r4, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	2200      	movs	r2, #0
 8001050:	602a      	str	r2, [r5, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	f7ff fa89 	bl	800056a <_lseek>
 8001058:	1c43      	adds	r3, r0, #1
 800105a:	d102      	bne.n	8001062 <_lseek_r+0x1e>
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	b103      	cbz	r3, 8001062 <_lseek_r+0x1e>
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
 8001064:	200000b4 	.word	0x200000b4

08001068 <__malloc_lock>:
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <__malloc_lock+0x8>)
 800106a:	f7ff be0b 	b.w	8000c84 <__retarget_lock_acquire_recursive>
 800106e:	bf00      	nop
 8001070:	200000a8 	.word	0x200000a8

08001074 <__malloc_unlock>:
 8001074:	4801      	ldr	r0, [pc, #4]	; (800107c <__malloc_unlock+0x8>)
 8001076:	f7ff be06 	b.w	8000c86 <__retarget_lock_release_recursive>
 800107a:	bf00      	nop
 800107c:	200000a8 	.word	0x200000a8

08001080 <_read_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d07      	ldr	r5, [pc, #28]	; (80010a0 <_read_r+0x20>)
 8001084:	4604      	mov	r4, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4611      	mov	r1, r2
 800108a:	2200      	movs	r2, #0
 800108c:	602a      	str	r2, [r5, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	f7ff fa0b 	bl	80004aa <_read>
 8001094:	1c43      	adds	r3, r0, #1
 8001096:	d102      	bne.n	800109e <_read_r+0x1e>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	b103      	cbz	r3, 800109e <_read_r+0x1e>
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	bd38      	pop	{r3, r4, r5, pc}
 80010a0:	200000b4 	.word	0x200000b4

080010a4 <_init>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

080010b0 <_fini>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr
