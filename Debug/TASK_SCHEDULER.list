
TASK_SCHEDULER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001120  08001120  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001120  08001120  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001120  08001120  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000074  0800119c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800119c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b3f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ae  00000000  00000000  00020be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00020f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00021120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c47  00000000  00000000  00021270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014fe  00000000  00000000  00023eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000095e8  00000000  00000000  000253b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e99d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  0002e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001040 	.word	0x08001040

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08001040 	.word	0x08001040

080001d4 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {TASK1_START, TASK2_START, TASK3_START, TASK4_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task 1 is running

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001d8:	f000 f8d6 	bl	8000388 <enable_processor_faults>

	//init schedular stack
	init_schedular_stack(SCHED_STACK_START);
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x3c>)
 80001de:	f000 f885 	bl	80002ec <init_schedular_stack>

	//array filling capture addresses
	task_handlers[0] = (uint32_t)task1;
 80001e2:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <main+0x40>)
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <main+0x44>)
 80001e6:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0x48>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x44>)
 80001ec:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3;
 80001ee:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <main+0x4c>)
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0x44>)
 80001f2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4;
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <main+0x50>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x44>)
 80001f8:	60da      	str	r2, [r3, #12]

	//dummy frames
	init_task_stack();
 80001fa:	f000 f87d 	bl	80002f8 <init_task_stack>

	init_systick_timer(TICK_HZ);
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f000 f831 	bl	8000268 <init_systick_timer>

	switch_sp_to_psp();
 8000206:	f000 f911 	bl	800042c <switch_sp_to_psp>

	task1();
 800020a:	f000 f80d 	bl	8000228 <task1>

	while(1);
 800020e:	e7fe      	b.n	800020e <main+0x3a>
 8000210:	2001f000 	.word	0x2001f000
 8000214:	08000229 	.word	0x08000229
 8000218:	20000090 	.word	0x20000090
 800021c:	08000239 	.word	0x08000239
 8000220:	08000249 	.word	0x08000249
 8000224:	08000259 	.word	0x08000259

08000228 <task1>:
}

void task1(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	while(1){
		printf("task1 \n");
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <task1+0xc>)
 800022e:	f000 fa77 	bl	8000720 <puts>
 8000232:	e7fb      	b.n	800022c <task1+0x4>
 8000234:	08001058 	.word	0x08001058

08000238 <task2>:
	}
}
void task2(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	while(1){
		printf("task2 \n");
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <task2+0xc>)
 800023e:	f000 fa6f 	bl	8000720 <puts>
 8000242:	e7fb      	b.n	800023c <task2+0x4>
 8000244:	08001060 	.word	0x08001060

08000248 <task3>:
		}
}
void task3(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	while(1){
		printf("task3 \n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <task3+0xc>)
 800024e:	f000 fa67 	bl	8000720 <puts>
 8000252:	e7fb      	b.n	800024c <task3+0x4>
 8000254:	08001068 	.word	0x08001068

08000258 <task4>:
		}
}
void task4(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1){
		printf("task4 \n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task4+0xc>)
 800025e:	f000 fa5f 	bl	8000720 <puts>
 8000262:	e7fb      	b.n	800025c <task4+0x4>
 8000264:	08001070 	.word	0x08001070

08000268 <init_systick_timer>:
		}
}

void init_systick_timer(uint32_t tick_hz){
 8000268:	b480      	push	{r7}
 800026a:	b087      	sub	sp, #28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	uint32_t *pSYST_RVR = (uint32_t *) 0xE000E014;
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <init_systick_timer+0x64>)
 8000272:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_CSR = (uint32_t *) 0xE000E010;
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <init_systick_timer+0x68>)
 8000276:	613b      	str	r3, [r7, #16]
	uint32_t count_value = SYSTICK_TIM_CLK/tick_hz;
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <init_systick_timer+0x6c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000280:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSYST_RVR &= ~(0x00FFFFFF);
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSYST_RVR |= count_value;
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	431a      	orrs	r2, r3
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pSYST_CSR |= (1<<1); //Enables SysTick exception request
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0202 	orr.w	r2, r3, #2
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (1<<2); //Indicates the clock source, processor clock source
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f043 0204 	orr.w	r2, r3, #4
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (1<<0); // Enables the counter
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f043 0201 	orr.w	r2, r3, #1
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	371c      	adds	r7, #28
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e014 	.word	0xe000e014
 80002d0:	e000e010 	.word	0xe000e010
 80002d4:	00f42400 	.word	0x00f42400

080002d8 <SysTick_Handler>:

void SysTick_Handler(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	printf("SysTick_Handler \n");
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <SysTick_Handler+0x10>)
 80002de:	f000 fa1f 	bl	8000720 <puts>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	08001078 	.word	0x08001078

080002ec <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 80002ec:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack): );
 80002ee:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002f2:	4770      	bx	lr

}
 80002f4:	bf00      	nop
	...

080002f8 <init_task_stack>:

void init_task_stack(void){
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i = 0; i< MAX_TASKS; i++){
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	e032      	b.n	800036a <init_task_stack+0x72>
		pPSP = (uint32_t*) psp_of_tasks[i];
 8000304:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <init_task_stack+0x88>)
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3b04      	subs	r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800031a:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3b04      	subs	r3, #4
 8000320:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <init_task_stack+0x8c>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b04      	subs	r3, #4
 8000332:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f06f 0202 	mvn.w	r2, #2
 800033a:	601a      	str	r2, [r3, #0]

		for(int j=0; j<13; j++){
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	e008      	b.n	8000354 <init_task_stack+0x5c>
			pPSP--;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b04      	subs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3301      	adds	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b0c      	cmp	r3, #12
 8000358:	ddf3      	ble.n	8000342 <init_task_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t) pPSP;
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	4908      	ldr	r1, [pc, #32]	; (8000380 <init_task_stack+0x88>)
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i< MAX_TASKS; i++){
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	3301      	adds	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	2b03      	cmp	r3, #3
 800036e:	ddc9      	ble.n	8000304 <init_task_stack+0xc>

	}
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	20000090 	.word	0x20000090

08000388 <enable_processor_faults>:

void enable_processor_faults(void){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
	uint32_t *pSHCRS = (uint32_t*) 0xE000ED24;
 800038e:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <enable_processor_faults+0x3c>)
 8000390:	607b      	str	r3, [r7, #4]
	*pSHCRS |= (1 << 16); //mem manage
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1 << 17); //Bus fault
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
	*pSHCRS |= (1 << 18); //Usage fault
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]

}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed24 	.word	0xe000ed24

080003c8 <HardFault_Handler>:

//impliment the fault handlers
void HardFault_Handler(void){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	printf("HardFault \n");
 80003cc:	4801      	ldr	r0, [pc, #4]	; (80003d4 <HardFault_Handler+0xc>)
 80003ce:	f000 f9a7 	bl	8000720 <puts>
	while(1);
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler+0xa>
 80003d4:	0800108c 	.word	0x0800108c

080003d8 <MemManage_Handler>:
}
void MemManage_Handler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	printf("MemManage \n");
 80003dc:	4801      	ldr	r0, [pc, #4]	; (80003e4 <MemManage_Handler+0xc>)
 80003de:	f000 f99f 	bl	8000720 <puts>
	while(1);
 80003e2:	e7fe      	b.n	80003e2 <MemManage_Handler+0xa>
 80003e4:	08001098 	.word	0x08001098

080003e8 <BusFault_Handler>:
}
void BusFault_Handler(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	printf("BusFault \n");
 80003ec:	4801      	ldr	r0, [pc, #4]	; (80003f4 <BusFault_Handler+0xc>)
 80003ee:	f000 f997 	bl	8000720 <puts>
	while(1);
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0xa>
 80003f4:	080010a4 	.word	0x080010a4

080003f8 <UsageFault_Handler>:
}
void UsageFault_Handler(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	printf("UsageFault \n");
 80003fc:	4801      	ldr	r0, [pc, #4]	; (8000404 <UsageFault_Handler+0xc>)
 80003fe:	f000 f98f 	bl	8000720 <puts>
	while(1);
 8000402:	e7fe      	b.n	8000402 <UsageFault_Handler+0xa>
 8000404:	080010b0 	.word	0x080010b0

08000408 <get_psp_value>:
}


uint32_t get_psp_value(void){
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <get_psp_value+0x1c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <get_psp_value+0x20>)
 8000414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000418:	4618      	mov	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000a0 	.word	0x200000a0
 8000428:	20000000 	.word	0x20000000

0800042c <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//get the value of psp of current task
	__asm volatile("PUSH {LR}"); //preserve LR which connext back to main()
 800042c:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 800042e:	f7ff ffeb 	bl	8000408 <get_psp_value>
	__asm volatile("MSR PSP, R0"); //Initialize PSP.
 8000432:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000436:	f85d eb04 	ldr.w	lr, [sp], #4

	// change SP  to PSP using CONTROL Register
	__asm volatile ("MOV R0, #0x02");
 800043a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 800043e:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000442:	4770      	bx	lr

}
 8000444:	bf00      	nop

08000446 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b086      	sub	sp, #24
 800044a:	af00      	add	r7, sp, #0
 800044c:	60f8      	str	r0, [r7, #12]
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	e00a      	b.n	800046e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000458:	f3af 8000 	nop.w
 800045c:	4601      	mov	r1, r0
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	1c5a      	adds	r2, r3, #1
 8000462:	60ba      	str	r2, [r7, #8]
 8000464:	b2ca      	uxtb	r2, r1
 8000466:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	dbf0      	blt.n	8000458 <_read+0x12>
  }

  return len;
 8000476:	687b      	ldr	r3, [r7, #4]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	e009      	b.n	80004a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	60ba      	str	r2, [r7, #8]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	3301      	adds	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	dbf1      	blt.n	8000492 <_write+0x12>
  }
  return len;
 80004ae:	687b      	ldr	r3, [r7, #4]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_close>:

int _close(int file)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004e0:	605a      	str	r2, [r3, #4]
  return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <_isatty>:

int _isatty(int file)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f8:	2301      	movs	r3, #1
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f000 f846 	bl	80005e0 <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20018000 	.word	0x20018000
 8000580:	00000400 	.word	0x00000400
 8000584:	200000a4 	.word	0x200000a4
 8000588:	200000b8 	.word	0x200000b8

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 f817 	bl	80005ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe09 	bl	80001d4 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005d0:	08001128 	.word	0x08001128
  ldr r2, =_sbss
 80005d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005d8:	200000b8 	.word	0x200000b8

080005dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC_IRQHandler>
	...

080005e0 <__errno>:
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <__errno+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000010 	.word	0x20000010

080005ec <__libc_init_array>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	4d0d      	ldr	r5, [pc, #52]	; (8000624 <__libc_init_array+0x38>)
 80005f0:	4c0d      	ldr	r4, [pc, #52]	; (8000628 <__libc_init_array+0x3c>)
 80005f2:	1b64      	subs	r4, r4, r5
 80005f4:	10a4      	asrs	r4, r4, #2
 80005f6:	2600      	movs	r6, #0
 80005f8:	42a6      	cmp	r6, r4
 80005fa:	d109      	bne.n	8000610 <__libc_init_array+0x24>
 80005fc:	4d0b      	ldr	r5, [pc, #44]	; (800062c <__libc_init_array+0x40>)
 80005fe:	4c0c      	ldr	r4, [pc, #48]	; (8000630 <__libc_init_array+0x44>)
 8000600:	f000 fd1e 	bl	8001040 <_init>
 8000604:	1b64      	subs	r4, r4, r5
 8000606:	10a4      	asrs	r4, r4, #2
 8000608:	2600      	movs	r6, #0
 800060a:	42a6      	cmp	r6, r4
 800060c:	d105      	bne.n	800061a <__libc_init_array+0x2e>
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f855 3b04 	ldr.w	r3, [r5], #4
 8000614:	4798      	blx	r3
 8000616:	3601      	adds	r6, #1
 8000618:	e7ee      	b.n	80005f8 <__libc_init_array+0xc>
 800061a:	f855 3b04 	ldr.w	r3, [r5], #4
 800061e:	4798      	blx	r3
 8000620:	3601      	adds	r6, #1
 8000622:	e7f2      	b.n	800060a <__libc_init_array+0x1e>
 8000624:	08001120 	.word	0x08001120
 8000628:	08001120 	.word	0x08001120
 800062c:	08001120 	.word	0x08001120
 8000630:	08001124 	.word	0x08001124

08000634 <memset>:
 8000634:	4402      	add	r2, r0
 8000636:	4603      	mov	r3, r0
 8000638:	4293      	cmp	r3, r2
 800063a:	d100      	bne.n	800063e <memset+0xa>
 800063c:	4770      	bx	lr
 800063e:	f803 1b01 	strb.w	r1, [r3], #1
 8000642:	e7f9      	b.n	8000638 <memset+0x4>

08000644 <_puts_r>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	460e      	mov	r6, r1
 8000648:	4605      	mov	r5, r0
 800064a:	b118      	cbz	r0, 8000654 <_puts_r+0x10>
 800064c:	6983      	ldr	r3, [r0, #24]
 800064e:	b90b      	cbnz	r3, 8000654 <_puts_r+0x10>
 8000650:	f000 fa48 	bl	8000ae4 <__sinit>
 8000654:	69ab      	ldr	r3, [r5, #24]
 8000656:	68ac      	ldr	r4, [r5, #8]
 8000658:	b913      	cbnz	r3, 8000660 <_puts_r+0x1c>
 800065a:	4628      	mov	r0, r5
 800065c:	f000 fa42 	bl	8000ae4 <__sinit>
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <_puts_r+0xd0>)
 8000662:	429c      	cmp	r4, r3
 8000664:	d120      	bne.n	80006a8 <_puts_r+0x64>
 8000666:	686c      	ldr	r4, [r5, #4]
 8000668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800066a:	07db      	lsls	r3, r3, #31
 800066c:	d405      	bmi.n	800067a <_puts_r+0x36>
 800066e:	89a3      	ldrh	r3, [r4, #12]
 8000670:	0598      	lsls	r0, r3, #22
 8000672:	d402      	bmi.n	800067a <_puts_r+0x36>
 8000674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000676:	f000 fad3 	bl	8000c20 <__retarget_lock_acquire_recursive>
 800067a:	89a3      	ldrh	r3, [r4, #12]
 800067c:	0719      	lsls	r1, r3, #28
 800067e:	d51d      	bpl.n	80006bc <_puts_r+0x78>
 8000680:	6923      	ldr	r3, [r4, #16]
 8000682:	b1db      	cbz	r3, 80006bc <_puts_r+0x78>
 8000684:	3e01      	subs	r6, #1
 8000686:	68a3      	ldr	r3, [r4, #8]
 8000688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800068c:	3b01      	subs	r3, #1
 800068e:	60a3      	str	r3, [r4, #8]
 8000690:	bb39      	cbnz	r1, 80006e2 <_puts_r+0x9e>
 8000692:	2b00      	cmp	r3, #0
 8000694:	da38      	bge.n	8000708 <_puts_r+0xc4>
 8000696:	4622      	mov	r2, r4
 8000698:	210a      	movs	r1, #10
 800069a:	4628      	mov	r0, r5
 800069c:	f000 f848 	bl	8000730 <__swbuf_r>
 80006a0:	3001      	adds	r0, #1
 80006a2:	d011      	beq.n	80006c8 <_puts_r+0x84>
 80006a4:	250a      	movs	r5, #10
 80006a6:	e011      	b.n	80006cc <_puts_r+0x88>
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <_puts_r+0xd4>)
 80006aa:	429c      	cmp	r4, r3
 80006ac:	d101      	bne.n	80006b2 <_puts_r+0x6e>
 80006ae:	68ac      	ldr	r4, [r5, #8]
 80006b0:	e7da      	b.n	8000668 <_puts_r+0x24>
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <_puts_r+0xd8>)
 80006b4:	429c      	cmp	r4, r3
 80006b6:	bf08      	it	eq
 80006b8:	68ec      	ldreq	r4, [r5, #12]
 80006ba:	e7d5      	b.n	8000668 <_puts_r+0x24>
 80006bc:	4621      	mov	r1, r4
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 f888 	bl	80007d4 <__swsetup_r>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d0dd      	beq.n	8000684 <_puts_r+0x40>
 80006c8:	f04f 35ff 	mov.w	r5, #4294967295
 80006cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ce:	07da      	lsls	r2, r3, #31
 80006d0:	d405      	bmi.n	80006de <_puts_r+0x9a>
 80006d2:	89a3      	ldrh	r3, [r4, #12]
 80006d4:	059b      	lsls	r3, r3, #22
 80006d6:	d402      	bmi.n	80006de <_puts_r+0x9a>
 80006d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006da:	f000 faa2 	bl	8000c22 <__retarget_lock_release_recursive>
 80006de:	4628      	mov	r0, r5
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da04      	bge.n	80006f0 <_puts_r+0xac>
 80006e6:	69a2      	ldr	r2, [r4, #24]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dc06      	bgt.n	80006fa <_puts_r+0xb6>
 80006ec:	290a      	cmp	r1, #10
 80006ee:	d004      	beq.n	80006fa <_puts_r+0xb6>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	6022      	str	r2, [r4, #0]
 80006f6:	7019      	strb	r1, [r3, #0]
 80006f8:	e7c5      	b.n	8000686 <_puts_r+0x42>
 80006fa:	4622      	mov	r2, r4
 80006fc:	4628      	mov	r0, r5
 80006fe:	f000 f817 	bl	8000730 <__swbuf_r>
 8000702:	3001      	adds	r0, #1
 8000704:	d1bf      	bne.n	8000686 <_puts_r+0x42>
 8000706:	e7df      	b.n	80006c8 <_puts_r+0x84>
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	250a      	movs	r5, #10
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	6022      	str	r2, [r4, #0]
 8000710:	701d      	strb	r5, [r3, #0]
 8000712:	e7db      	b.n	80006cc <_puts_r+0x88>
 8000714:	080010e0 	.word	0x080010e0
 8000718:	08001100 	.word	0x08001100
 800071c:	080010c0 	.word	0x080010c0

08000720 <puts>:
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <puts+0xc>)
 8000722:	4601      	mov	r1, r0
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	f7ff bf8d 	b.w	8000644 <_puts_r>
 800072a:	bf00      	nop
 800072c:	20000010 	.word	0x20000010

08000730 <__swbuf_r>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	460e      	mov	r6, r1
 8000734:	4614      	mov	r4, r2
 8000736:	4605      	mov	r5, r0
 8000738:	b118      	cbz	r0, 8000742 <__swbuf_r+0x12>
 800073a:	6983      	ldr	r3, [r0, #24]
 800073c:	b90b      	cbnz	r3, 8000742 <__swbuf_r+0x12>
 800073e:	f000 f9d1 	bl	8000ae4 <__sinit>
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <__swbuf_r+0x98>)
 8000744:	429c      	cmp	r4, r3
 8000746:	d12b      	bne.n	80007a0 <__swbuf_r+0x70>
 8000748:	686c      	ldr	r4, [r5, #4]
 800074a:	69a3      	ldr	r3, [r4, #24]
 800074c:	60a3      	str	r3, [r4, #8]
 800074e:	89a3      	ldrh	r3, [r4, #12]
 8000750:	071a      	lsls	r2, r3, #28
 8000752:	d52f      	bpl.n	80007b4 <__swbuf_r+0x84>
 8000754:	6923      	ldr	r3, [r4, #16]
 8000756:	b36b      	cbz	r3, 80007b4 <__swbuf_r+0x84>
 8000758:	6923      	ldr	r3, [r4, #16]
 800075a:	6820      	ldr	r0, [r4, #0]
 800075c:	1ac0      	subs	r0, r0, r3
 800075e:	6963      	ldr	r3, [r4, #20]
 8000760:	b2f6      	uxtb	r6, r6
 8000762:	4283      	cmp	r3, r0
 8000764:	4637      	mov	r7, r6
 8000766:	dc04      	bgt.n	8000772 <__swbuf_r+0x42>
 8000768:	4621      	mov	r1, r4
 800076a:	4628      	mov	r0, r5
 800076c:	f000 f926 	bl	80009bc <_fflush_r>
 8000770:	bb30      	cbnz	r0, 80007c0 <__swbuf_r+0x90>
 8000772:	68a3      	ldr	r3, [r4, #8]
 8000774:	3b01      	subs	r3, #1
 8000776:	60a3      	str	r3, [r4, #8]
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	6022      	str	r2, [r4, #0]
 800077e:	701e      	strb	r6, [r3, #0]
 8000780:	6963      	ldr	r3, [r4, #20]
 8000782:	3001      	adds	r0, #1
 8000784:	4283      	cmp	r3, r0
 8000786:	d004      	beq.n	8000792 <__swbuf_r+0x62>
 8000788:	89a3      	ldrh	r3, [r4, #12]
 800078a:	07db      	lsls	r3, r3, #31
 800078c:	d506      	bpl.n	800079c <__swbuf_r+0x6c>
 800078e:	2e0a      	cmp	r6, #10
 8000790:	d104      	bne.n	800079c <__swbuf_r+0x6c>
 8000792:	4621      	mov	r1, r4
 8000794:	4628      	mov	r0, r5
 8000796:	f000 f911 	bl	80009bc <_fflush_r>
 800079a:	b988      	cbnz	r0, 80007c0 <__swbuf_r+0x90>
 800079c:	4638      	mov	r0, r7
 800079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <__swbuf_r+0x9c>)
 80007a2:	429c      	cmp	r4, r3
 80007a4:	d101      	bne.n	80007aa <__swbuf_r+0x7a>
 80007a6:	68ac      	ldr	r4, [r5, #8]
 80007a8:	e7cf      	b.n	800074a <__swbuf_r+0x1a>
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <__swbuf_r+0xa0>)
 80007ac:	429c      	cmp	r4, r3
 80007ae:	bf08      	it	eq
 80007b0:	68ec      	ldreq	r4, [r5, #12]
 80007b2:	e7ca      	b.n	800074a <__swbuf_r+0x1a>
 80007b4:	4621      	mov	r1, r4
 80007b6:	4628      	mov	r0, r5
 80007b8:	f000 f80c 	bl	80007d4 <__swsetup_r>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d0cb      	beq.n	8000758 <__swbuf_r+0x28>
 80007c0:	f04f 37ff 	mov.w	r7, #4294967295
 80007c4:	e7ea      	b.n	800079c <__swbuf_r+0x6c>
 80007c6:	bf00      	nop
 80007c8:	080010e0 	.word	0x080010e0
 80007cc:	08001100 	.word	0x08001100
 80007d0:	080010c0 	.word	0x080010c0

080007d4 <__swsetup_r>:
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <__swsetup_r+0xcc>)
 80007d6:	b570      	push	{r4, r5, r6, lr}
 80007d8:	681d      	ldr	r5, [r3, #0]
 80007da:	4606      	mov	r6, r0
 80007dc:	460c      	mov	r4, r1
 80007de:	b125      	cbz	r5, 80007ea <__swsetup_r+0x16>
 80007e0:	69ab      	ldr	r3, [r5, #24]
 80007e2:	b913      	cbnz	r3, 80007ea <__swsetup_r+0x16>
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f97d 	bl	8000ae4 <__sinit>
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <__swsetup_r+0xd0>)
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d10f      	bne.n	8000810 <__swsetup_r+0x3c>
 80007f0:	686c      	ldr	r4, [r5, #4]
 80007f2:	89a3      	ldrh	r3, [r4, #12]
 80007f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007f8:	0719      	lsls	r1, r3, #28
 80007fa:	d42c      	bmi.n	8000856 <__swsetup_r+0x82>
 80007fc:	06dd      	lsls	r5, r3, #27
 80007fe:	d411      	bmi.n	8000824 <__swsetup_r+0x50>
 8000800:	2309      	movs	r3, #9
 8000802:	6033      	str	r3, [r6, #0]
 8000804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000808:	81a3      	strh	r3, [r4, #12]
 800080a:	f04f 30ff 	mov.w	r0, #4294967295
 800080e:	e03e      	b.n	800088e <__swsetup_r+0xba>
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <__swsetup_r+0xd4>)
 8000812:	429c      	cmp	r4, r3
 8000814:	d101      	bne.n	800081a <__swsetup_r+0x46>
 8000816:	68ac      	ldr	r4, [r5, #8]
 8000818:	e7eb      	b.n	80007f2 <__swsetup_r+0x1e>
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <__swsetup_r+0xd8>)
 800081c:	429c      	cmp	r4, r3
 800081e:	bf08      	it	eq
 8000820:	68ec      	ldreq	r4, [r5, #12]
 8000822:	e7e6      	b.n	80007f2 <__swsetup_r+0x1e>
 8000824:	0758      	lsls	r0, r3, #29
 8000826:	d512      	bpl.n	800084e <__swsetup_r+0x7a>
 8000828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800082a:	b141      	cbz	r1, 800083e <__swsetup_r+0x6a>
 800082c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000830:	4299      	cmp	r1, r3
 8000832:	d002      	beq.n	800083a <__swsetup_r+0x66>
 8000834:	4630      	mov	r0, r6
 8000836:	f000 fa5b 	bl	8000cf0 <_free_r>
 800083a:	2300      	movs	r3, #0
 800083c:	6363      	str	r3, [r4, #52]	; 0x34
 800083e:	89a3      	ldrh	r3, [r4, #12]
 8000840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000844:	81a3      	strh	r3, [r4, #12]
 8000846:	2300      	movs	r3, #0
 8000848:	6063      	str	r3, [r4, #4]
 800084a:	6923      	ldr	r3, [r4, #16]
 800084c:	6023      	str	r3, [r4, #0]
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	81a3      	strh	r3, [r4, #12]
 8000856:	6923      	ldr	r3, [r4, #16]
 8000858:	b94b      	cbnz	r3, 800086e <__swsetup_r+0x9a>
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000864:	d003      	beq.n	800086e <__swsetup_r+0x9a>
 8000866:	4621      	mov	r1, r4
 8000868:	4630      	mov	r0, r6
 800086a:	f000 fa01 	bl	8000c70 <__smakebuf_r>
 800086e:	89a0      	ldrh	r0, [r4, #12]
 8000870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000874:	f010 0301 	ands.w	r3, r0, #1
 8000878:	d00a      	beq.n	8000890 <__swsetup_r+0xbc>
 800087a:	2300      	movs	r3, #0
 800087c:	60a3      	str	r3, [r4, #8]
 800087e:	6963      	ldr	r3, [r4, #20]
 8000880:	425b      	negs	r3, r3
 8000882:	61a3      	str	r3, [r4, #24]
 8000884:	6923      	ldr	r3, [r4, #16]
 8000886:	b943      	cbnz	r3, 800089a <__swsetup_r+0xc6>
 8000888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800088c:	d1ba      	bne.n	8000804 <__swsetup_r+0x30>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	0781      	lsls	r1, r0, #30
 8000892:	bf58      	it	pl
 8000894:	6963      	ldrpl	r3, [r4, #20]
 8000896:	60a3      	str	r3, [r4, #8]
 8000898:	e7f4      	b.n	8000884 <__swsetup_r+0xb0>
 800089a:	2000      	movs	r0, #0
 800089c:	e7f7      	b.n	800088e <__swsetup_r+0xba>
 800089e:	bf00      	nop
 80008a0:	20000010 	.word	0x20000010
 80008a4:	080010e0 	.word	0x080010e0
 80008a8:	08001100 	.word	0x08001100
 80008ac:	080010c0 	.word	0x080010c0

080008b0 <__sflush_r>:
 80008b0:	898a      	ldrh	r2, [r1, #12]
 80008b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b6:	4605      	mov	r5, r0
 80008b8:	0710      	lsls	r0, r2, #28
 80008ba:	460c      	mov	r4, r1
 80008bc:	d458      	bmi.n	8000970 <__sflush_r+0xc0>
 80008be:	684b      	ldr	r3, [r1, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dc05      	bgt.n	80008d0 <__sflush_r+0x20>
 80008c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dc02      	bgt.n	80008d0 <__sflush_r+0x20>
 80008ca:	2000      	movs	r0, #0
 80008cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d0f9      	beq.n	80008ca <__sflush_r+0x1a>
 80008d6:	2300      	movs	r3, #0
 80008d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008dc:	682f      	ldr	r7, [r5, #0]
 80008de:	602b      	str	r3, [r5, #0]
 80008e0:	d032      	beq.n	8000948 <__sflush_r+0x98>
 80008e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	075a      	lsls	r2, r3, #29
 80008e8:	d505      	bpl.n	80008f6 <__sflush_r+0x46>
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	1ac0      	subs	r0, r0, r3
 80008ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008f0:	b10b      	cbz	r3, 80008f6 <__sflush_r+0x46>
 80008f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f4:	1ac0      	subs	r0, r0, r3
 80008f6:	2300      	movs	r3, #0
 80008f8:	4602      	mov	r2, r0
 80008fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008fc:	6a21      	ldr	r1, [r4, #32]
 80008fe:	4628      	mov	r0, r5
 8000900:	47b0      	blx	r6
 8000902:	1c43      	adds	r3, r0, #1
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	d106      	bne.n	8000916 <__sflush_r+0x66>
 8000908:	6829      	ldr	r1, [r5, #0]
 800090a:	291d      	cmp	r1, #29
 800090c:	d82c      	bhi.n	8000968 <__sflush_r+0xb8>
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <__sflush_r+0x108>)
 8000910:	40ca      	lsrs	r2, r1
 8000912:	07d6      	lsls	r6, r2, #31
 8000914:	d528      	bpl.n	8000968 <__sflush_r+0xb8>
 8000916:	2200      	movs	r2, #0
 8000918:	6062      	str	r2, [r4, #4]
 800091a:	04d9      	lsls	r1, r3, #19
 800091c:	6922      	ldr	r2, [r4, #16]
 800091e:	6022      	str	r2, [r4, #0]
 8000920:	d504      	bpl.n	800092c <__sflush_r+0x7c>
 8000922:	1c42      	adds	r2, r0, #1
 8000924:	d101      	bne.n	800092a <__sflush_r+0x7a>
 8000926:	682b      	ldr	r3, [r5, #0]
 8000928:	b903      	cbnz	r3, 800092c <__sflush_r+0x7c>
 800092a:	6560      	str	r0, [r4, #84]	; 0x54
 800092c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800092e:	602f      	str	r7, [r5, #0]
 8000930:	2900      	cmp	r1, #0
 8000932:	d0ca      	beq.n	80008ca <__sflush_r+0x1a>
 8000934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000938:	4299      	cmp	r1, r3
 800093a:	d002      	beq.n	8000942 <__sflush_r+0x92>
 800093c:	4628      	mov	r0, r5
 800093e:	f000 f9d7 	bl	8000cf0 <_free_r>
 8000942:	2000      	movs	r0, #0
 8000944:	6360      	str	r0, [r4, #52]	; 0x34
 8000946:	e7c1      	b.n	80008cc <__sflush_r+0x1c>
 8000948:	6a21      	ldr	r1, [r4, #32]
 800094a:	2301      	movs	r3, #1
 800094c:	4628      	mov	r0, r5
 800094e:	47b0      	blx	r6
 8000950:	1c41      	adds	r1, r0, #1
 8000952:	d1c7      	bne.n	80008e4 <__sflush_r+0x34>
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0c4      	beq.n	80008e4 <__sflush_r+0x34>
 800095a:	2b1d      	cmp	r3, #29
 800095c:	d001      	beq.n	8000962 <__sflush_r+0xb2>
 800095e:	2b16      	cmp	r3, #22
 8000960:	d101      	bne.n	8000966 <__sflush_r+0xb6>
 8000962:	602f      	str	r7, [r5, #0]
 8000964:	e7b1      	b.n	80008ca <__sflush_r+0x1a>
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	81a3      	strh	r3, [r4, #12]
 800096e:	e7ad      	b.n	80008cc <__sflush_r+0x1c>
 8000970:	690f      	ldr	r7, [r1, #16]
 8000972:	2f00      	cmp	r7, #0
 8000974:	d0a9      	beq.n	80008ca <__sflush_r+0x1a>
 8000976:	0793      	lsls	r3, r2, #30
 8000978:	680e      	ldr	r6, [r1, #0]
 800097a:	bf08      	it	eq
 800097c:	694b      	ldreq	r3, [r1, #20]
 800097e:	600f      	str	r7, [r1, #0]
 8000980:	bf18      	it	ne
 8000982:	2300      	movne	r3, #0
 8000984:	eba6 0807 	sub.w	r8, r6, r7
 8000988:	608b      	str	r3, [r1, #8]
 800098a:	f1b8 0f00 	cmp.w	r8, #0
 800098e:	dd9c      	ble.n	80008ca <__sflush_r+0x1a>
 8000990:	6a21      	ldr	r1, [r4, #32]
 8000992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000994:	4643      	mov	r3, r8
 8000996:	463a      	mov	r2, r7
 8000998:	4628      	mov	r0, r5
 800099a:	47b0      	blx	r6
 800099c:	2800      	cmp	r0, #0
 800099e:	dc06      	bgt.n	80009ae <__sflush_r+0xfe>
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a6:	81a3      	strh	r3, [r4, #12]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	e78e      	b.n	80008cc <__sflush_r+0x1c>
 80009ae:	4407      	add	r7, r0
 80009b0:	eba8 0800 	sub.w	r8, r8, r0
 80009b4:	e7e9      	b.n	800098a <__sflush_r+0xda>
 80009b6:	bf00      	nop
 80009b8:	20400001 	.word	0x20400001

080009bc <_fflush_r>:
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	690b      	ldr	r3, [r1, #16]
 80009c0:	4605      	mov	r5, r0
 80009c2:	460c      	mov	r4, r1
 80009c4:	b913      	cbnz	r3, 80009cc <_fflush_r+0x10>
 80009c6:	2500      	movs	r5, #0
 80009c8:	4628      	mov	r0, r5
 80009ca:	bd38      	pop	{r3, r4, r5, pc}
 80009cc:	b118      	cbz	r0, 80009d6 <_fflush_r+0x1a>
 80009ce:	6983      	ldr	r3, [r0, #24]
 80009d0:	b90b      	cbnz	r3, 80009d6 <_fflush_r+0x1a>
 80009d2:	f000 f887 	bl	8000ae4 <__sinit>
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <_fflush_r+0x6c>)
 80009d8:	429c      	cmp	r4, r3
 80009da:	d11b      	bne.n	8000a14 <_fflush_r+0x58>
 80009dc:	686c      	ldr	r4, [r5, #4]
 80009de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0ef      	beq.n	80009c6 <_fflush_r+0xa>
 80009e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009e8:	07d0      	lsls	r0, r2, #31
 80009ea:	d404      	bmi.n	80009f6 <_fflush_r+0x3a>
 80009ec:	0599      	lsls	r1, r3, #22
 80009ee:	d402      	bmi.n	80009f6 <_fflush_r+0x3a>
 80009f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009f2:	f000 f915 	bl	8000c20 <__retarget_lock_acquire_recursive>
 80009f6:	4628      	mov	r0, r5
 80009f8:	4621      	mov	r1, r4
 80009fa:	f7ff ff59 	bl	80008b0 <__sflush_r>
 80009fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a00:	07da      	lsls	r2, r3, #31
 8000a02:	4605      	mov	r5, r0
 8000a04:	d4e0      	bmi.n	80009c8 <_fflush_r+0xc>
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	059b      	lsls	r3, r3, #22
 8000a0a:	d4dd      	bmi.n	80009c8 <_fflush_r+0xc>
 8000a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a0e:	f000 f908 	bl	8000c22 <__retarget_lock_release_recursive>
 8000a12:	e7d9      	b.n	80009c8 <_fflush_r+0xc>
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_fflush_r+0x70>)
 8000a16:	429c      	cmp	r4, r3
 8000a18:	d101      	bne.n	8000a1e <_fflush_r+0x62>
 8000a1a:	68ac      	ldr	r4, [r5, #8]
 8000a1c:	e7df      	b.n	80009de <_fflush_r+0x22>
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <_fflush_r+0x74>)
 8000a20:	429c      	cmp	r4, r3
 8000a22:	bf08      	it	eq
 8000a24:	68ec      	ldreq	r4, [r5, #12]
 8000a26:	e7da      	b.n	80009de <_fflush_r+0x22>
 8000a28:	080010e0 	.word	0x080010e0
 8000a2c:	08001100 	.word	0x08001100
 8000a30:	080010c0 	.word	0x080010c0

08000a34 <std>:
 8000a34:	2300      	movs	r3, #0
 8000a36:	b510      	push	{r4, lr}
 8000a38:	4604      	mov	r4, r0
 8000a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a42:	6083      	str	r3, [r0, #8]
 8000a44:	8181      	strh	r1, [r0, #12]
 8000a46:	6643      	str	r3, [r0, #100]	; 0x64
 8000a48:	81c2      	strh	r2, [r0, #14]
 8000a4a:	6183      	str	r3, [r0, #24]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2208      	movs	r2, #8
 8000a50:	305c      	adds	r0, #92	; 0x5c
 8000a52:	f7ff fdef 	bl	8000634 <memset>
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <std+0x38>)
 8000a58:	6263      	str	r3, [r4, #36]	; 0x24
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <std+0x3c>)
 8000a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <std+0x40>)
 8000a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <std+0x44>)
 8000a64:	6224      	str	r4, [r4, #32]
 8000a66:	6323      	str	r3, [r4, #48]	; 0x30
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08000ed1 	.word	0x08000ed1
 8000a70:	08000ef3 	.word	0x08000ef3
 8000a74:	08000f2b 	.word	0x08000f2b
 8000a78:	08000f4f 	.word	0x08000f4f

08000a7c <_cleanup_r>:
 8000a7c:	4901      	ldr	r1, [pc, #4]	; (8000a84 <_cleanup_r+0x8>)
 8000a7e:	f000 b8af 	b.w	8000be0 <_fwalk_reent>
 8000a82:	bf00      	nop
 8000a84:	080009bd 	.word	0x080009bd

08000a88 <__sfmoreglue>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	2268      	movs	r2, #104	; 0x68
 8000a8c:	1e4d      	subs	r5, r1, #1
 8000a8e:	4355      	muls	r5, r2
 8000a90:	460e      	mov	r6, r1
 8000a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a96:	f000 f997 	bl	8000dc8 <_malloc_r>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	b140      	cbz	r0, 8000ab0 <__sfmoreglue+0x28>
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8000aa4:	300c      	adds	r0, #12
 8000aa6:	60a0      	str	r0, [r4, #8]
 8000aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000aac:	f7ff fdc2 	bl	8000634 <memset>
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}

08000ab4 <__sfp_lock_acquire>:
 8000ab4:	4801      	ldr	r0, [pc, #4]	; (8000abc <__sfp_lock_acquire+0x8>)
 8000ab6:	f000 b8b3 	b.w	8000c20 <__retarget_lock_acquire_recursive>
 8000aba:	bf00      	nop
 8000abc:	200000a9 	.word	0x200000a9

08000ac0 <__sfp_lock_release>:
 8000ac0:	4801      	ldr	r0, [pc, #4]	; (8000ac8 <__sfp_lock_release+0x8>)
 8000ac2:	f000 b8ae 	b.w	8000c22 <__retarget_lock_release_recursive>
 8000ac6:	bf00      	nop
 8000ac8:	200000a9 	.word	0x200000a9

08000acc <__sinit_lock_acquire>:
 8000acc:	4801      	ldr	r0, [pc, #4]	; (8000ad4 <__sinit_lock_acquire+0x8>)
 8000ace:	f000 b8a7 	b.w	8000c20 <__retarget_lock_acquire_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	200000aa 	.word	0x200000aa

08000ad8 <__sinit_lock_release>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	; (8000ae0 <__sinit_lock_release+0x8>)
 8000ada:	f000 b8a2 	b.w	8000c22 <__retarget_lock_release_recursive>
 8000ade:	bf00      	nop
 8000ae0:	200000aa 	.word	0x200000aa

08000ae4 <__sinit>:
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	f7ff fff0 	bl	8000acc <__sinit_lock_acquire>
 8000aec:	69a3      	ldr	r3, [r4, #24]
 8000aee:	b11b      	cbz	r3, 8000af8 <__sinit+0x14>
 8000af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af4:	f7ff bff0 	b.w	8000ad8 <__sinit_lock_release>
 8000af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000afc:	6523      	str	r3, [r4, #80]	; 0x50
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <__sinit+0x68>)
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <__sinit+0x6c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	bf04      	itt	eq
 8000b0a:	2301      	moveq	r3, #1
 8000b0c:	61a3      	streq	r3, [r4, #24]
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f000 f820 	bl	8000b54 <__sfp>
 8000b14:	6060      	str	r0, [r4, #4]
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 f81c 	bl	8000b54 <__sfp>
 8000b1c:	60a0      	str	r0, [r4, #8]
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f000 f818 	bl	8000b54 <__sfp>
 8000b24:	2200      	movs	r2, #0
 8000b26:	60e0      	str	r0, [r4, #12]
 8000b28:	2104      	movs	r1, #4
 8000b2a:	6860      	ldr	r0, [r4, #4]
 8000b2c:	f7ff ff82 	bl	8000a34 <std>
 8000b30:	68a0      	ldr	r0, [r4, #8]
 8000b32:	2201      	movs	r2, #1
 8000b34:	2109      	movs	r1, #9
 8000b36:	f7ff ff7d 	bl	8000a34 <std>
 8000b3a:	68e0      	ldr	r0, [r4, #12]
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	2112      	movs	r1, #18
 8000b40:	f7ff ff78 	bl	8000a34 <std>
 8000b44:	2301      	movs	r3, #1
 8000b46:	61a3      	str	r3, [r4, #24]
 8000b48:	e7d2      	b.n	8000af0 <__sinit+0xc>
 8000b4a:	bf00      	nop
 8000b4c:	080010bc 	.word	0x080010bc
 8000b50:	08000a7d 	.word	0x08000a7d

08000b54 <__sfp>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	4607      	mov	r7, r0
 8000b58:	f7ff ffac 	bl	8000ab4 <__sfp_lock_acquire>
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <__sfp+0x84>)
 8000b5e:	681e      	ldr	r6, [r3, #0]
 8000b60:	69b3      	ldr	r3, [r6, #24]
 8000b62:	b913      	cbnz	r3, 8000b6a <__sfp+0x16>
 8000b64:	4630      	mov	r0, r6
 8000b66:	f7ff ffbd 	bl	8000ae4 <__sinit>
 8000b6a:	3648      	adds	r6, #72	; 0x48
 8000b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	d503      	bpl.n	8000b7c <__sfp+0x28>
 8000b74:	6833      	ldr	r3, [r6, #0]
 8000b76:	b30b      	cbz	r3, 8000bbc <__sfp+0x68>
 8000b78:	6836      	ldr	r6, [r6, #0]
 8000b7a:	e7f7      	b.n	8000b6c <__sfp+0x18>
 8000b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b80:	b9d5      	cbnz	r5, 8000bb8 <__sfp+0x64>
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <__sfp+0x88>)
 8000b84:	60e3      	str	r3, [r4, #12]
 8000b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8000b8c:	f000 f847 	bl	8000c1e <__retarget_lock_init_recursive>
 8000b90:	f7ff ff96 	bl	8000ac0 <__sfp_lock_release>
 8000b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b9c:	6025      	str	r5, [r4, #0]
 8000b9e:	61a5      	str	r5, [r4, #24]
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ba8:	f7ff fd44 	bl	8000634 <memset>
 8000bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb8:	3468      	adds	r4, #104	; 0x68
 8000bba:	e7d9      	b.n	8000b70 <__sfp+0x1c>
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	f7ff ff62 	bl	8000a88 <__sfmoreglue>
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	6030      	str	r0, [r6, #0]
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d1d5      	bne.n	8000b78 <__sfp+0x24>
 8000bcc:	f7ff ff78 	bl	8000ac0 <__sfp_lock_release>
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	e7ee      	b.n	8000bb4 <__sfp+0x60>
 8000bd6:	bf00      	nop
 8000bd8:	080010bc 	.word	0x080010bc
 8000bdc:	ffff0001 	.word	0xffff0001

08000be0 <_fwalk_reent>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	4606      	mov	r6, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8000bf6:	d505      	bpl.n	8000c04 <_fwalk_reent+0x24>
 8000bf8:	6824      	ldr	r4, [r4, #0]
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d1f7      	bne.n	8000bee <_fwalk_reent+0xe>
 8000bfe:	4638      	mov	r0, r7
 8000c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c04:	89ab      	ldrh	r3, [r5, #12]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d907      	bls.n	8000c1a <_fwalk_reent+0x3a>
 8000c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	d003      	beq.n	8000c1a <_fwalk_reent+0x3a>
 8000c12:	4629      	mov	r1, r5
 8000c14:	4630      	mov	r0, r6
 8000c16:	47c0      	blx	r8
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	3568      	adds	r5, #104	; 0x68
 8000c1c:	e7e9      	b.n	8000bf2 <_fwalk_reent+0x12>

08000c1e <__retarget_lock_init_recursive>:
 8000c1e:	4770      	bx	lr

08000c20 <__retarget_lock_acquire_recursive>:
 8000c20:	4770      	bx	lr

08000c22 <__retarget_lock_release_recursive>:
 8000c22:	4770      	bx	lr

08000c24 <__swhatbuf_r>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	460e      	mov	r6, r1
 8000c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	b096      	sub	sp, #88	; 0x58
 8000c30:	4614      	mov	r4, r2
 8000c32:	461d      	mov	r5, r3
 8000c34:	da08      	bge.n	8000c48 <__swhatbuf_r+0x24>
 8000c36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	602a      	str	r2, [r5, #0]
 8000c3e:	061a      	lsls	r2, r3, #24
 8000c40:	d410      	bmi.n	8000c64 <__swhatbuf_r+0x40>
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	e00e      	b.n	8000c66 <__swhatbuf_r+0x42>
 8000c48:	466a      	mov	r2, sp
 8000c4a:	f000 f9a7 	bl	8000f9c <_fstat_r>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	dbf1      	blt.n	8000c36 <__swhatbuf_r+0x12>
 8000c52:	9a01      	ldr	r2, [sp, #4]
 8000c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c5c:	425a      	negs	r2, r3
 8000c5e:	415a      	adcs	r2, r3
 8000c60:	602a      	str	r2, [r5, #0]
 8000c62:	e7ee      	b.n	8000c42 <__swhatbuf_r+0x1e>
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	2000      	movs	r0, #0
 8000c68:	6023      	str	r3, [r4, #0]
 8000c6a:	b016      	add	sp, #88	; 0x58
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c70 <__smakebuf_r>:
 8000c70:	898b      	ldrh	r3, [r1, #12]
 8000c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c74:	079d      	lsls	r5, r3, #30
 8000c76:	4606      	mov	r6, r0
 8000c78:	460c      	mov	r4, r1
 8000c7a:	d507      	bpl.n	8000c8c <__smakebuf_r+0x1c>
 8000c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c80:	6023      	str	r3, [r4, #0]
 8000c82:	6123      	str	r3, [r4, #16]
 8000c84:	2301      	movs	r3, #1
 8000c86:	6163      	str	r3, [r4, #20]
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	ab01      	add	r3, sp, #4
 8000c8e:	466a      	mov	r2, sp
 8000c90:	f7ff ffc8 	bl	8000c24 <__swhatbuf_r>
 8000c94:	9900      	ldr	r1, [sp, #0]
 8000c96:	4605      	mov	r5, r0
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f895 	bl	8000dc8 <_malloc_r>
 8000c9e:	b948      	cbnz	r0, 8000cb4 <__smakebuf_r+0x44>
 8000ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca4:	059a      	lsls	r2, r3, #22
 8000ca6:	d4ef      	bmi.n	8000c88 <__smakebuf_r+0x18>
 8000ca8:	f023 0303 	bic.w	r3, r3, #3
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	81a3      	strh	r3, [r4, #12]
 8000cb2:	e7e3      	b.n	8000c7c <__smakebuf_r+0xc>
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <__smakebuf_r+0x7c>)
 8000cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	6020      	str	r0, [r4, #0]
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	81a3      	strh	r3, [r4, #12]
 8000cc2:	9b00      	ldr	r3, [sp, #0]
 8000cc4:	6163      	str	r3, [r4, #20]
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	6120      	str	r0, [r4, #16]
 8000cca:	b15b      	cbz	r3, 8000ce4 <__smakebuf_r+0x74>
 8000ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	f000 f975 	bl	8000fc0 <_isatty_r>
 8000cd6:	b128      	cbz	r0, 8000ce4 <__smakebuf_r+0x74>
 8000cd8:	89a3      	ldrh	r3, [r4, #12]
 8000cda:	f023 0303 	bic.w	r3, r3, #3
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	81a3      	strh	r3, [r4, #12]
 8000ce4:	89a0      	ldrh	r0, [r4, #12]
 8000ce6:	4305      	orrs	r5, r0
 8000ce8:	81a5      	strh	r5, [r4, #12]
 8000cea:	e7cd      	b.n	8000c88 <__smakebuf_r+0x18>
 8000cec:	08000a7d 	.word	0x08000a7d

08000cf0 <_free_r>:
 8000cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d044      	beq.n	8000d80 <_free_r+0x90>
 8000cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cfa:	9001      	str	r0, [sp, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8000d02:	bfb8      	it	lt
 8000d04:	18e4      	addlt	r4, r4, r3
 8000d06:	f000 f97d 	bl	8001004 <__malloc_lock>
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <_free_r+0x94>)
 8000d0c:	9801      	ldr	r0, [sp, #4]
 8000d0e:	6813      	ldr	r3, [r2, #0]
 8000d10:	b933      	cbnz	r3, 8000d20 <_free_r+0x30>
 8000d12:	6063      	str	r3, [r4, #4]
 8000d14:	6014      	str	r4, [r2, #0]
 8000d16:	b003      	add	sp, #12
 8000d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d1c:	f000 b978 	b.w	8001010 <__malloc_unlock>
 8000d20:	42a3      	cmp	r3, r4
 8000d22:	d908      	bls.n	8000d36 <_free_r+0x46>
 8000d24:	6825      	ldr	r5, [r4, #0]
 8000d26:	1961      	adds	r1, r4, r5
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	bf01      	itttt	eq
 8000d2c:	6819      	ldreq	r1, [r3, #0]
 8000d2e:	685b      	ldreq	r3, [r3, #4]
 8000d30:	1949      	addeq	r1, r1, r5
 8000d32:	6021      	streq	r1, [r4, #0]
 8000d34:	e7ed      	b.n	8000d12 <_free_r+0x22>
 8000d36:	461a      	mov	r2, r3
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	b10b      	cbz	r3, 8000d40 <_free_r+0x50>
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d9fa      	bls.n	8000d36 <_free_r+0x46>
 8000d40:	6811      	ldr	r1, [r2, #0]
 8000d42:	1855      	adds	r5, r2, r1
 8000d44:	42a5      	cmp	r5, r4
 8000d46:	d10b      	bne.n	8000d60 <_free_r+0x70>
 8000d48:	6824      	ldr	r4, [r4, #0]
 8000d4a:	4421      	add	r1, r4
 8000d4c:	1854      	adds	r4, r2, r1
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	6011      	str	r1, [r2, #0]
 8000d52:	d1e0      	bne.n	8000d16 <_free_r+0x26>
 8000d54:	681c      	ldr	r4, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	6053      	str	r3, [r2, #4]
 8000d5a:	4421      	add	r1, r4
 8000d5c:	6011      	str	r1, [r2, #0]
 8000d5e:	e7da      	b.n	8000d16 <_free_r+0x26>
 8000d60:	d902      	bls.n	8000d68 <_free_r+0x78>
 8000d62:	230c      	movs	r3, #12
 8000d64:	6003      	str	r3, [r0, #0]
 8000d66:	e7d6      	b.n	8000d16 <_free_r+0x26>
 8000d68:	6825      	ldr	r5, [r4, #0]
 8000d6a:	1961      	adds	r1, r4, r5
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf04      	itt	eq
 8000d70:	6819      	ldreq	r1, [r3, #0]
 8000d72:	685b      	ldreq	r3, [r3, #4]
 8000d74:	6063      	str	r3, [r4, #4]
 8000d76:	bf04      	itt	eq
 8000d78:	1949      	addeq	r1, r1, r5
 8000d7a:	6021      	streq	r1, [r4, #0]
 8000d7c:	6054      	str	r4, [r2, #4]
 8000d7e:	e7ca      	b.n	8000d16 <_free_r+0x26>
 8000d80:	b003      	add	sp, #12
 8000d82:	bd30      	pop	{r4, r5, pc}
 8000d84:	200000ac 	.word	0x200000ac

08000d88 <sbrk_aligned>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4e0e      	ldr	r6, [pc, #56]	; (8000dc4 <sbrk_aligned+0x3c>)
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	6831      	ldr	r1, [r6, #0]
 8000d90:	4605      	mov	r5, r0
 8000d92:	b911      	cbnz	r1, 8000d9a <sbrk_aligned+0x12>
 8000d94:	f000 f88c 	bl	8000eb0 <_sbrk_r>
 8000d98:	6030      	str	r0, [r6, #0]
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	f000 f887 	bl	8000eb0 <_sbrk_r>
 8000da2:	1c43      	adds	r3, r0, #1
 8000da4:	d00a      	beq.n	8000dbc <sbrk_aligned+0x34>
 8000da6:	1cc4      	adds	r4, r0, #3
 8000da8:	f024 0403 	bic.w	r4, r4, #3
 8000dac:	42a0      	cmp	r0, r4
 8000dae:	d007      	beq.n	8000dc0 <sbrk_aligned+0x38>
 8000db0:	1a21      	subs	r1, r4, r0
 8000db2:	4628      	mov	r0, r5
 8000db4:	f000 f87c 	bl	8000eb0 <_sbrk_r>
 8000db8:	3001      	adds	r0, #1
 8000dba:	d101      	bne.n	8000dc0 <sbrk_aligned+0x38>
 8000dbc:	f04f 34ff 	mov.w	r4, #4294967295
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	200000b0 	.word	0x200000b0

08000dc8 <_malloc_r>:
 8000dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dcc:	1ccd      	adds	r5, r1, #3
 8000dce:	f025 0503 	bic.w	r5, r5, #3
 8000dd2:	3508      	adds	r5, #8
 8000dd4:	2d0c      	cmp	r5, #12
 8000dd6:	bf38      	it	cc
 8000dd8:	250c      	movcc	r5, #12
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	4607      	mov	r7, r0
 8000dde:	db01      	blt.n	8000de4 <_malloc_r+0x1c>
 8000de0:	42a9      	cmp	r1, r5
 8000de2:	d905      	bls.n	8000df0 <_malloc_r+0x28>
 8000de4:	230c      	movs	r3, #12
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	2600      	movs	r6, #0
 8000dea:	4630      	mov	r0, r6
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df0:	4e2e      	ldr	r6, [pc, #184]	; (8000eac <_malloc_r+0xe4>)
 8000df2:	f000 f907 	bl	8001004 <__malloc_lock>
 8000df6:	6833      	ldr	r3, [r6, #0]
 8000df8:	461c      	mov	r4, r3
 8000dfa:	bb34      	cbnz	r4, 8000e4a <_malloc_r+0x82>
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	4638      	mov	r0, r7
 8000e00:	f7ff ffc2 	bl	8000d88 <sbrk_aligned>
 8000e04:	1c43      	adds	r3, r0, #1
 8000e06:	4604      	mov	r4, r0
 8000e08:	d14d      	bne.n	8000ea6 <_malloc_r+0xde>
 8000e0a:	6834      	ldr	r4, [r6, #0]
 8000e0c:	4626      	mov	r6, r4
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d140      	bne.n	8000e94 <_malloc_r+0xcc>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	4631      	mov	r1, r6
 8000e16:	4638      	mov	r0, r7
 8000e18:	eb04 0803 	add.w	r8, r4, r3
 8000e1c:	f000 f848 	bl	8000eb0 <_sbrk_r>
 8000e20:	4580      	cmp	r8, r0
 8000e22:	d13a      	bne.n	8000e9a <_malloc_r+0xd2>
 8000e24:	6821      	ldr	r1, [r4, #0]
 8000e26:	3503      	adds	r5, #3
 8000e28:	1a6d      	subs	r5, r5, r1
 8000e2a:	f025 0503 	bic.w	r5, r5, #3
 8000e2e:	3508      	adds	r5, #8
 8000e30:	2d0c      	cmp	r5, #12
 8000e32:	bf38      	it	cc
 8000e34:	250c      	movcc	r5, #12
 8000e36:	4629      	mov	r1, r5
 8000e38:	4638      	mov	r0, r7
 8000e3a:	f7ff ffa5 	bl	8000d88 <sbrk_aligned>
 8000e3e:	3001      	adds	r0, #1
 8000e40:	d02b      	beq.n	8000e9a <_malloc_r+0xd2>
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	442b      	add	r3, r5
 8000e46:	6023      	str	r3, [r4, #0]
 8000e48:	e00e      	b.n	8000e68 <_malloc_r+0xa0>
 8000e4a:	6822      	ldr	r2, [r4, #0]
 8000e4c:	1b52      	subs	r2, r2, r5
 8000e4e:	d41e      	bmi.n	8000e8e <_malloc_r+0xc6>
 8000e50:	2a0b      	cmp	r2, #11
 8000e52:	d916      	bls.n	8000e82 <_malloc_r+0xba>
 8000e54:	1961      	adds	r1, r4, r5
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	6025      	str	r5, [r4, #0]
 8000e5a:	bf18      	it	ne
 8000e5c:	6059      	strne	r1, [r3, #4]
 8000e5e:	6863      	ldr	r3, [r4, #4]
 8000e60:	bf08      	it	eq
 8000e62:	6031      	streq	r1, [r6, #0]
 8000e64:	5162      	str	r2, [r4, r5]
 8000e66:	604b      	str	r3, [r1, #4]
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f104 060b 	add.w	r6, r4, #11
 8000e6e:	f000 f8cf 	bl	8001010 <__malloc_unlock>
 8000e72:	f026 0607 	bic.w	r6, r6, #7
 8000e76:	1d23      	adds	r3, r4, #4
 8000e78:	1af2      	subs	r2, r6, r3
 8000e7a:	d0b6      	beq.n	8000dea <_malloc_r+0x22>
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	50a3      	str	r3, [r4, r2]
 8000e80:	e7b3      	b.n	8000dea <_malloc_r+0x22>
 8000e82:	6862      	ldr	r2, [r4, #4]
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	bf0c      	ite	eq
 8000e88:	6032      	streq	r2, [r6, #0]
 8000e8a:	605a      	strne	r2, [r3, #4]
 8000e8c:	e7ec      	b.n	8000e68 <_malloc_r+0xa0>
 8000e8e:	4623      	mov	r3, r4
 8000e90:	6864      	ldr	r4, [r4, #4]
 8000e92:	e7b2      	b.n	8000dfa <_malloc_r+0x32>
 8000e94:	4634      	mov	r4, r6
 8000e96:	6876      	ldr	r6, [r6, #4]
 8000e98:	e7b9      	b.n	8000e0e <_malloc_r+0x46>
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	f000 f8b6 	bl	8001010 <__malloc_unlock>
 8000ea4:	e7a1      	b.n	8000dea <_malloc_r+0x22>
 8000ea6:	6025      	str	r5, [r4, #0]
 8000ea8:	e7de      	b.n	8000e68 <_malloc_r+0xa0>
 8000eaa:	bf00      	nop
 8000eac:	200000ac 	.word	0x200000ac

08000eb0 <_sbrk_r>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4d06      	ldr	r5, [pc, #24]	; (8000ecc <_sbrk_r+0x1c>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	602b      	str	r3, [r5, #0]
 8000ebc:	f7ff fb30 	bl	8000520 <_sbrk>
 8000ec0:	1c43      	adds	r3, r0, #1
 8000ec2:	d102      	bne.n	8000eca <_sbrk_r+0x1a>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	b103      	cbz	r3, 8000eca <_sbrk_r+0x1a>
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
 8000ecc:	200000b4 	.word	0x200000b4

08000ed0 <__sread>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed8:	f000 f8a0 	bl	800101c <_read_r>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	bfab      	itete	ge
 8000ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ee4:	181b      	addge	r3, r3, r0
 8000ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eea:	bfac      	ite	ge
 8000eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eee:	81a3      	strhlt	r3, [r4, #12]
 8000ef0:	bd10      	pop	{r4, pc}

08000ef2 <__swrite>:
 8000ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef6:	461f      	mov	r7, r3
 8000ef8:	898b      	ldrh	r3, [r1, #12]
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	4605      	mov	r5, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	4616      	mov	r6, r2
 8000f02:	d505      	bpl.n	8000f10 <__swrite+0x1e>
 8000f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f000 f868 	bl	8000fe0 <_lseek_r>
 8000f10:	89a3      	ldrh	r3, [r4, #12]
 8000f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f1a:	81a3      	strh	r3, [r4, #12]
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4628      	mov	r0, r5
 8000f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f26:	f000 b817 	b.w	8000f58 <_write_r>

08000f2a <__sseek>:
 8000f2a:	b510      	push	{r4, lr}
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f32:	f000 f855 	bl	8000fe0 <_lseek_r>
 8000f36:	1c43      	adds	r3, r0, #1
 8000f38:	89a3      	ldrh	r3, [r4, #12]
 8000f3a:	bf15      	itete	ne
 8000f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f46:	81a3      	strheq	r3, [r4, #12]
 8000f48:	bf18      	it	ne
 8000f4a:	81a3      	strhne	r3, [r4, #12]
 8000f4c:	bd10      	pop	{r4, pc}

08000f4e <__sclose>:
 8000f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f52:	f000 b813 	b.w	8000f7c <_close_r>
	...

08000f58 <_write_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4d07      	ldr	r5, [pc, #28]	; (8000f78 <_write_r+0x20>)
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4611      	mov	r1, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	602a      	str	r2, [r5, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	f7ff fa8a 	bl	8000480 <_write>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	d102      	bne.n	8000f76 <_write_r+0x1e>
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	b103      	cbz	r3, 8000f76 <_write_r+0x1e>
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	200000b4 	.word	0x200000b4

08000f7c <_close_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4d06      	ldr	r5, [pc, #24]	; (8000f98 <_close_r+0x1c>)
 8000f80:	2300      	movs	r3, #0
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	602b      	str	r3, [r5, #0]
 8000f88:	f7ff fa96 	bl	80004b8 <_close>
 8000f8c:	1c43      	adds	r3, r0, #1
 8000f8e:	d102      	bne.n	8000f96 <_close_r+0x1a>
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	b103      	cbz	r3, 8000f96 <_close_r+0x1a>
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
 8000f98:	200000b4 	.word	0x200000b4

08000f9c <_fstat_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4d07      	ldr	r5, [pc, #28]	; (8000fbc <_fstat_r+0x20>)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	602b      	str	r3, [r5, #0]
 8000faa:	f7ff fa91 	bl	80004d0 <_fstat>
 8000fae:	1c43      	adds	r3, r0, #1
 8000fb0:	d102      	bne.n	8000fb8 <_fstat_r+0x1c>
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	b103      	cbz	r3, 8000fb8 <_fstat_r+0x1c>
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	bd38      	pop	{r3, r4, r5, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000b4 	.word	0x200000b4

08000fc0 <_isatty_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d06      	ldr	r5, [pc, #24]	; (8000fdc <_isatty_r+0x1c>)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	602b      	str	r3, [r5, #0]
 8000fcc:	f7ff fa90 	bl	80004f0 <_isatty>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_isatty_r+0x1a>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_isatty_r+0x1a>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	200000b4 	.word	0x200000b4

08000fe0 <_lseek_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d07      	ldr	r5, [pc, #28]	; (8001000 <_lseek_r+0x20>)
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	602a      	str	r2, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f7ff fa89 	bl	8000506 <_lseek>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_lseek_r+0x1e>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_lseek_r+0x1e>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	200000b4 	.word	0x200000b4

08001004 <__malloc_lock>:
 8001004:	4801      	ldr	r0, [pc, #4]	; (800100c <__malloc_lock+0x8>)
 8001006:	f7ff be0b 	b.w	8000c20 <__retarget_lock_acquire_recursive>
 800100a:	bf00      	nop
 800100c:	200000a8 	.word	0x200000a8

08001010 <__malloc_unlock>:
 8001010:	4801      	ldr	r0, [pc, #4]	; (8001018 <__malloc_unlock+0x8>)
 8001012:	f7ff be06 	b.w	8000c22 <__retarget_lock_release_recursive>
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8

0800101c <_read_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d07      	ldr	r5, [pc, #28]	; (800103c <_read_r+0x20>)
 8001020:	4604      	mov	r4, r0
 8001022:	4608      	mov	r0, r1
 8001024:	4611      	mov	r1, r2
 8001026:	2200      	movs	r2, #0
 8001028:	602a      	str	r2, [r5, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	f7ff fa0b 	bl	8000446 <_read>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_read_r+0x1e>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_read_r+0x1e>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	200000b4 	.word	0x200000b4

08001040 <_init>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr

0800104c <_fini>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr
